{
    "docs": [
        {
            "location": "/",
            "text": "Alessandro de Lima Folk\n\u00b6\n\n\nEscrevo aqui coisas que me ajudam no dia-a-dia, coisas que aprendo, e etc!\n\n\nAgradecimento\n\u00b6\n\n\n\n\nWilliam Galleti",
            "title": "Home"
        },
        {
            "location": "/#alessandro-de-lima-folk",
            "text": "Escrevo aqui coisas que me ajudam no dia-a-dia, coisas que aprendo, e etc!",
            "title": "Alessandro de Lima Folk"
        },
        {
            "location": "/#agradecimento",
            "text": "William Galleti",
            "title": "Agradecimento"
        },
        {
            "location": "/servidores/nginx/python/",
            "text": "Ubuntu + Nginx + uwsgi + supervisor para Django\n\u00b6\n\n\nPrimeiro vale lembrar que esse \u00e9 mais um guia do que um tutorial!\n\n\n\n\nRevisado e testado em 2017-09-28\n\n\n\n\nAgradecimentos\n\u00b6\n\n\nAntes de mais nada, agradecer a galera que me ajudaram muito!!! \n\n\nValeu mo\u00e7ada!!!\n\n\n\n\nAlessandro Folk\n\n\nRodrigo Rodrigues (grupo ngMasters)\n\n\nRomulo (grupo ngMasters)\n\n\n\n\nPreparando servidor\n\u00b6\n\n\nCriando usu\u00e1rio\n\u00b6\n\n\n1\n2\nuseradd -m -d /home/deploy -G adm,www-data,sudo -s /bin/bash deploy\npasswd deploy\n\n\n\n\n\n\nPara confirmar as pemiss\u00f5es, verifique o arquivo \n/etc/passwd\n\n\n1\ndeploy:x:1001:1001::/home/deploy:/bin/bash\n\n\n\n\n\n\nVerifique se o arquivo /home/deploy/.profile est\u00e1 com as seguintes informa\u00e7\u00f5es\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n# ~/.profile: executed by the command interpreter for login shells.\n\n\n# This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login\n\n\n# exists.\n\n\n# see /usr/share/doc/bash/examples/startup-files for examples.\n\n\n# the files are located in the bash-doc package.\n\n\n\n# the default umask is set in /etc/profile; for setting the umask\n\n\n# for ssh logins, install and configure the libpam-umask package.\n\n\n#umask 022\n\n\n\n# if running bash\n\n\nif\n \n[\n -n \n\"\n$BASH_VERSION\n\"\n \n]\n;\n \nthen\n\n\n    \n# include .bashrc if it exists\n\n\n    \nif\n \n[\n -f \n\"\n$HOME\n/.bashrc\"\n \n]\n;\n \nthen\n\n\n        . \n\"\n$HOME\n/.bashrc\"\n\n\n    \nfi\n\n\nfi\n\n\n\n\n# set PATH so it includes user's private bin directories\n\n\nPATH\n=\n\"\n$HOME\n/bin:\n$HOME\n/.local/bin:\n$PATH\n\"\n\n\n\n\n\n\n\nRede\n\u00b6\n\n\n\n\nTroque o usu\u00e1rio\n\n\nAs configura\u00e7\u00f5es abaixo poder\u00e3o ser feitas com usu\u00e1rio \ndeploy\n pois o mesmo foi criado como adminitrador!!!\n\n\n\n\nAdicionando dns e dominio de busca\n\n\n1\n2\n3\n4\n5\nsudo nano /etc/resolvconf/resolv.conf.d/tail\n\n-- Add\nnameserver \n192\n.168.0.16\nsearch gruposcheffer.com\n\n\n\n\n\n\nGit\n\u00b6\n\n\nPrimeiro vamo configurar o git. Para isso vamos criar a chave ssh e configurar o usu\u00e1rio e email global\n\n\nVamos Gerar a Chave\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nssh-keygen -t rsa -C \n\"email@dominio.com\"\n\n\nGenerating public/private rsa key pair.\nEnter file in which to save the key \n(\n/home/deploy/.ssh/id_rsa\n)\n:\n[\nEnter\n]\n\nCreated directory \n'/home/deploy/.ssh'\n.\nEnter passphrase \n(\nempty \nfor\n no passphrase\n)\n:\n[\nSenha\n]\n\nEnter same passphrase again:\n[\nRepete a Senha\n]\n\nYour identification has been saved in /home/deploy/.ssh/id_rsa.\nYour public key has been saved in /home/deploy/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:***************************** ti@gruposcheffer.com.br\n\n\n\n\n\n\nAplique a chave no seu servidor de vers\u00f5es (gitlab, ou github)\n\n\nConfigurando usu\u00e1rio global\n\n\n1\n2\ngit config --global user.name \n\"Seu Nome\"\n\ngit config --global user.email \n\"email@dominio.com\"\n\n\n\n\n\n\n\nOracle\n\u00b6\n\n\n\n\nObs\n\n\nEssa foi a forma mais rapida de instalar e configurar o oracle no ubuntu!!!\n\n\n\n\nRefer\u00eancia\n \nhttps://help.ubuntu.com/community/Oracle%20Instant%20Client\n\n\nBaixe os rpm's do site \nhttp://www.oracle.com/technetwork/topics/linuxx86-64soft-092277.html\n e de permiss\u00e3o de execu\u00e7\u00e3o nos mesmos.\n\n\nPS\n: basic, sqlplus, devel\n\n\nPara efetuar a instala\u00e7\u00e3o, vamos usar o alien\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\nsudo apt-get install alien libaio1 libaio1:i386\n\nsudo alien -i oracle-instantclient12.2-basic-12.2.0.1.0-1.x86_64.rpm\nsudo alien -i oracle-instantclient12.2-devel-12.2.0.1.0-1.x86_64.rpm\nsudo alien -i oracle-instantclient12.2-sqlplus-12.2.0.1.0-1.x86_64.rpm\n\n \necho\n \n'export LD_LIBRARY_PATH=/usr/lib/oracle/12.2/client64/lib/${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}'\n >> ~/.profile\n\n sudo vi /etc/ld.so.conf.d/oracle.conf \n&&\n sudo chmod o+r /etc/ld.so.conf.d/oracle.conf\n\n\n# Add This on /etc/ld.so.conf.d/oracle.conf\n\n /usr/lib/oracle/12.2/client64/lib/\nsudo ldconfig\n\n\necho\n \n'export ORACLE_HOME=/usr/lib/oracle/12.2/client64'\n >> ~/.profile\n\necho\n \n'export TNS_ADMIN=$ORACLE_HOME/network/admin'\n >> ~/.profile\n\necho\n \n'export PATH=$PATH:$ORACLE_HOME/bin'\n >> ~/.profile\n\n\nsource\n ~/.profile\n\nmkdir -p \n$TNS_ADMIN\n\nsudo touch \n$TNS_ADMIN\n/tnsnames.ora\nsudo chmod o+r \n$TNS_ADMIN\n/tnsnames.ora\n\n\n\n\n\n\nAdicione os tns no arquivo tnsnames.ora e feito!\n\n\nFrontend\n\u00b6\n\n\nVamos instalar o node 6 e npm para depois adicionar as libs de frontend\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nsudo apt install python-software-properties\ncurl -sL https://deb.nodesource.com/setup_6.x \n|\n sudo -E bash -\nsudo apt-get install nodejs\n\n~$ node -v\nv4.2.6\n~$ npm -v\n\n3\n.5.2\n\n\n\n\n\n\nAgora vamos preparar algumas libs para o frontend (compila\u00e7\u00e3o)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nsudo npm i -g bower gulp yarn @angular/cli\n\n~$ bower -v\n\n1\n.8.2\n~$ yarn -v\n\n1\n.1.0\n~$ gulp -v\n\n[\n11\n:08:52\n]\n CLI version \n3\n.9.1\n\n\n\n\n\n\nBackend\n\u00b6\n\n\nDependencias\n\n\n1\nsudo apt-get install build-essential libssl-dev libffi-dev python3-dev\n\n\n\n\n\n\nInstalando o pyenv\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nsudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \n\\\n\nlibreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \n\\\n\nxz-utils tk-dev\n\ngit clone https://github.com/pyenv/pyenv.git ~/.pyenv\n\necho\n \n'export PYENV_ROOT=\"$HOME/.pyenv\"'\n >> ~/.profile\n\necho\n \n'export PATH=\"$PYENV_ROOT/bin:$PATH\"'\n >> ~/.profile\n\necho\n -e \n'if command -v pyenv 1>/dev/null 2>&1; then\\n  eval \"$(pyenv init -)\"\\nfi'\n >> ~/.profile\n\n\n\n\n\n\nVamos instalar o python 3.6.2\n\n\n1\n2\n3\npyenv install \n3\n.6.2\npyenv global \n3\n.6.2\npython -V\n\n\n\n\n\n\nuWsgi\n\u00b6\n\n\nPS: Caso esteja com virtualenv ativo, desative o mesmo \ndeactive\n\n\nInstale o uwsgi\n\n\n1\npip install uwsgi\n\n\n\n\n\n\nPrecisamos configurar um arquivo de uwsgi para cada projeto.\n\n\nNesse exemplo vamos utilizar as seguintes propriedades:\n\n\n\n\nsocket: Arquivo que ser\u00e1 gerado o socket para comunica\u00e7\u00e3o \n\n\nmaster: Ativar Processos master\n\n\nwsgi-file: Arquivo uwsgi do projeto django\n\n\nprocesses: Quantidade de Processos\n\n\nenable-threads: Ativar Threads\n\n\nthreads: Quantidades de threads por processo\n\n\nmax_requests: Maximo de requisi\u00e7\u00f5es\n\n\nharakiri: \n\n\nstats: status do socket\n\n\nstats-http: mostra status no http\n\n\nuid: usu\u00e1rio do SO\n\n\ngid: grupo do SO\n\n\nchmod-socket: permiss\u00e3o do Socket\n\n\nchdir: diretorio raiz do projeto\n\n\nhome: diretorio do virutalenv\n\n\nlogger: arquivo de log\n\n\nvacuum: Limpar ao fechar\n\n\nignore-write-errors: Ignorar escrita de erros\n\n\ndisable-write-exception: Desativar escrita de exce\u00e7\u00f5es\n\n\n\n\nNosso arquivo de exemplo que ficara no projeto1 (\nraiz do projeto/uwsgi.ini\n), ficar\u00e1 com a seguinte estrutura:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n[uwsgi]\n\n\nsocket\n \n=\n \nprojeto1.sock\n\n\nmaster\n \n=\n \ntrue\n\n\nwsgi-file\n \n=\n \nprojeto1/wsgi.py\n\n\nprocesses\n \n=\n \n2\n\n\nenable-threads\n \n=\n \ntrue\n\n\nthreads\n \n=\n \n10\n\n\nmax_requests\n \n=\n \n100\n\n\nharakiri\n \n=\n \n60\n\n\nstats\n \n=\n \n127.0.0.1:9191\n\n\nstats-http\n \n=\n \ntrue\n\n\nuid\n \n=\n \nwww-data\n\n\ngid\n \n=\n \nwww-data\n\n\nchmod-socket\n \n=\n \n666\n\n\nchdir\n \n=\n \n/home/deploy/projects/projeto1\n\n\nhome\n \n=\n \n/home/deploy/projects/projeto1/.venv/\n\n\nlogger\n \n=\n \nfile:/home/deploy/projects/projeto1/logs/uwsgi.log\n\n\nvacuum\n \n=\n \ntrue\n\n\nignore-write-errors\n \n=\n \ntrue\n\n\ndisable-write-exception\n \n=\n \ntrue\n\n\n\n\n\n\n\nImportante lembra que em \nstats\n a porta n\u00e3o pode repetir para quando configurar uma outra aplica\u00e7\u00e3o\n\n\nuwsgi_params\n\n\nNa documenta\u00e7\u00e3o oficial, precisamos definir alguns parametros para integrar com nginx \nhttps://github.com/nginx/nginx/blob/master/conf/uwsgi_params\n\n\nVamos criar o arquivo uwsgi_params.conf na raiz do projeto com o seguinte conte\u00fado:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\nuwsgi_param  QUERY_STRING       \n$query_string\n;\n\nuwsgi_param  REQUEST_METHOD     \n$request_method\n;\n\nuwsgi_param  CONTENT_TYPE       \n$content_type\n;\n\nuwsgi_param  CONTENT_LENGTH     \n$content_length\n;\n\n\nuwsgi_param  REQUEST_URI        \n$request_uri\n;\n\nuwsgi_param  PATH_INFO          \n$document_uri\n;\n\nuwsgi_param  DOCUMENT_ROOT      \n$document_root\n;\n\nuwsgi_param  SERVER_PROTOCOL    \n$server_protocol\n;\n\nuwsgi_param  REQUEST_SCHEME     \n$scheme\n;\n\nuwsgi_param  HTTPS              \n$https\n if_not_empty\n;\n\n\nuwsgi_param  REMOTE_ADDR        \n$remote_addr\n;\n\nuwsgi_param  REMOTE_PORT        \n$remote_port\n;\n\nuwsgi_param  SERVER_PORT        \n$server_port\n;\n\nuwsgi_param  SERVER_NAME        \n$server_name\n;\n\n\n\n\n\n\n\nPara testar se esta tudo funcionando, vamos rodar o seguinte comando:\n\n\n1\n2\ncd %diretorio_projeto%\nuwsgi --ini uwsgi.ini\n\n\n\n\n\n\nnginx\n\u00b6\n\n\nVamos instalar o servidor nginx:\n\n\n1\nsudo apt-get install nginx\n\n\n\n\n\n\nAp\u00f3s instalado, acesse o diretorio \ncd /etc/nginx/sites-avaliable\n\n\nVamos criar a configura\u00e7\u00e3o \ntouch projeto1.conf\n\n\n\n\nServidor web para frontend na porta 80\n\n\nServidor web para backend mapeando as rotas /statics e / utilizando socket para integrar com uwsgi\n\n\n\n\nImportante ter o dns configurado para utiliza\u00e7\u00e3o de nomes (exemplo: projeto1.seudominio.com)\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n# projeto1.conf\n\n\n\n# Frontend server\n\nserver \n{\n\n    \n# porta\n\n    listen \n80\n;\n\n    \n# nome DNS\n\n    server_name projeto1.seudominio.com\n;\n\n    \n# caminho raiz\n\n    root /home/deploy/projects/projeto1/frontend/dist\n;\n\n    \n# index file\n\n    index index.html\n;\n\n    \n# locais\n\n    location / \n{\n\n        try_files \n$uri\n \n$uri\n/ \n=\n404\n;\n\n    \n}\n\n\n}\n\n\n\n# Backend server\n\nserver \n{\n\n    \n# porta\n\n    listen \n8000\n;\n\n    \n# nome DNS\n\n    server_name projeto1.seudominio.com\n;\n\n    \n# charset\n\n    charset utf-8\n;\n\n    \n# configs\n\n    client_body_in_file_only clean\n;\n\n    client_body_buffer_size 32M\n;\n\n    sendfile on\n;\n\n    keepalive_timeout \n120\n;\n\n    send_timeout 300s\n;\n\n    client_max_body_size 300M\n;\n\n\n    \n# local /static\n\n    location /static \n{\n\n        \nalias\n /home/deploy/projects/projeto1/static\n;\n\n    \n}\n\n\n    \n# local /\n\n    location / \n{\n\n        \n# socket\n\n        uwsgi_pass projeto1\n;\n\n        \n# configs\n\n        proxy_read_timeout 40s\n;\n\n        proxy_send_timeout 40s\n;\n\n        uwsgi_ignore_client_abort on\n;\n\n        \n# params\n\n        include     /home/deploy/projects/projeto1/uwsgi_params\n;\n\n    \n}\n\n\n}\n\n\n# Reader socket\n\nupstream projeto1 \n{\n\n    server unix:///home/deploy/projects/projeto1/projeto1.sock\n;\n\n\n}\n\n\n\n\n\n\n\nFeito isso vamos ativar o site e reiniciar o nginx\n\n\n1\n2\nsudo ln -s /etc/nginx/sites-avaliable/projeto1.conf /etc/nginx/sites-enable/\nsudo /etc/init.d/nginx restart\n\n\n\n\n\n\nPara testar, abra o navegador e acesse o endere\u00e7o \nprojeto1.seudominio.com:8000\n e voc\u00ea ira recever um erro 502 Bad Gateway\n\n\nIsso ocorre porque o socket do uwsgi n\u00e3o est\u00e1 em execu\u00e7\u00e3o. Vamos no projeto e rodar o mesmo.\n\n\n1\n2\ncd\n raiz_projeto\nuwsgi --ini uwsgi.ini\n\n\n\n\n\n\nAcesse novamente e o site estara funcionando!\n\n\nSupervisor\n\u00b6\n\n\nPara n\u00e3o ter a necessidade de ficar levantando o uwsgi e nginx toda vez vamos automatizar essa tarefa com o supervisor.\n\n\nPara instalar e configurar\n\n\n1\n2\nsudo apt-get install supervisor\nsudo touch /etc/supervisor/conf.d/projeto1.conf\n\n\n\n\n\n\nDentro do arquivo, vamos colocar a seguinte estrutura\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n[\nprogram:projeto1\n]\n\n\nuser\n \n=\n deploy\n\ncommand\n \n=\n /home/deploy/.pyenv/shims/uwsgi --ini /home/deploy/projects/projeto1/uwsgi.ini\n\nautostart\n \n=\n \ntrue\n\n\nenvironment\n=\nLD_LIBRARY_PATH\n=\n'/usr/lib/oracle/12.2/client64/lib/${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}'\n,ORACLE_HOME\n=\n'/usr/lib/oracle/12.2/client64/'\n,TNS_ADMIN\n=\n'$ORACLE_HOME/network/admin'\n\n\n\n[\nprogram:nginx\n]\n\n\ncommand\n \n=\n /usr/sbin/nginx\n\nuser\n \n=\n root\n\nautostart\n \n=\n \ntrue\n\n\n\n\n\n\n\nFinalizado, vamos instalar o programa no supervisor\n\n\n1\n2\nsudo supervisorctl reread\nsudo supervisorctl start all\n\n\n\n\nFeito isso, sitema configurado e pronto!\n\n\nLinks\n\u00b6\n\n\n\n\nhttp://uwsgi-docs.readthedocs.io/en/latest/\n\n\nhttps://docs.djangoproject.com/pt-br/1.11/howto/deployment/wsgi/uwsgi/\n\n\nhttps://www.digitalocean.com/community/tutorials/how-to-serve-django-applications-with-uwsgi-and-nginx-on-ubuntu-16-04",
            "title": "Python"
        },
        {
            "location": "/servidores/nginx/python/#ubuntu-nginx-uwsgi-supervisor-para-django",
            "text": "Primeiro vale lembrar que esse \u00e9 mais um guia do que um tutorial!   Revisado e testado em 2017-09-28",
            "title": "Ubuntu + Nginx + uwsgi + supervisor para Django"
        },
        {
            "location": "/servidores/nginx/python/#agradecimentos",
            "text": "Antes de mais nada, agradecer a galera que me ajudaram muito!!!   Valeu mo\u00e7ada!!!   Alessandro Folk  Rodrigo Rodrigues (grupo ngMasters)  Romulo (grupo ngMasters)",
            "title": "Agradecimentos"
        },
        {
            "location": "/servidores/nginx/python/#preparando-servidor",
            "text": "",
            "title": "Preparando servidor"
        },
        {
            "location": "/servidores/nginx/python/#criando-usuario",
            "text": "1\n2 useradd -m -d /home/deploy -G adm,www-data,sudo -s /bin/bash deploy\npasswd deploy   Para confirmar as pemiss\u00f5es, verifique o arquivo  /etc/passwd  1 deploy:x:1001:1001::/home/deploy:/bin/bash   Verifique se o arquivo /home/deploy/.profile est\u00e1 com as seguintes informa\u00e7\u00f5es   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20 # ~/.profile: executed by the command interpreter for login shells.  # This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login  # exists.  # see /usr/share/doc/bash/examples/startup-files for examples.  # the files are located in the bash-doc package.  # the default umask is set in /etc/profile; for setting the umask  # for ssh logins, install and configure the libpam-umask package.  #umask 022  # if running bash  if   [  -n  \" $BASH_VERSION \"   ] ;   then       # include .bashrc if it exists       if   [  -f  \" $HOME /.bashrc\"   ] ;   then          .  \" $HOME /.bashrc\"       fi  fi   # set PATH so it includes user's private bin directories  PATH = \" $HOME /bin: $HOME /.local/bin: $PATH \"",
            "title": "Criando usu\u00e1rio"
        },
        {
            "location": "/servidores/nginx/python/#rede",
            "text": "Troque o usu\u00e1rio  As configura\u00e7\u00f5es abaixo poder\u00e3o ser feitas com usu\u00e1rio  deploy  pois o mesmo foi criado como adminitrador!!!   Adicionando dns e dominio de busca  1\n2\n3\n4\n5 sudo nano /etc/resolvconf/resolv.conf.d/tail\n\n-- Add\nnameserver  192 .168.0.16\nsearch gruposcheffer.com",
            "title": "Rede"
        },
        {
            "location": "/servidores/nginx/python/#git",
            "text": "Primeiro vamo configurar o git. Para isso vamos criar a chave ssh e configurar o usu\u00e1rio e email global  Vamos Gerar a Chave   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 ssh-keygen -t rsa -C  \"email@dominio.com\" \n\nGenerating public/private rsa key pair.\nEnter file in which to save the key  ( /home/deploy/.ssh/id_rsa ) : [ Enter ] \nCreated directory  '/home/deploy/.ssh' .\nEnter passphrase  ( empty  for  no passphrase ) : [ Senha ] \nEnter same passphrase again: [ Repete a Senha ] \nYour identification has been saved in /home/deploy/.ssh/id_rsa.\nYour public key has been saved in /home/deploy/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:***************************** ti@gruposcheffer.com.br   Aplique a chave no seu servidor de vers\u00f5es (gitlab, ou github)  Configurando usu\u00e1rio global  1\n2 git config --global user.name  \"Seu Nome\" \ngit config --global user.email  \"email@dominio.com\"",
            "title": "Git"
        },
        {
            "location": "/servidores/nginx/python/#oracle",
            "text": "Obs  Essa foi a forma mais rapida de instalar e configurar o oracle no ubuntu!!!   Refer\u00eancia   https://help.ubuntu.com/community/Oracle%20Instant%20Client  Baixe os rpm's do site  http://www.oracle.com/technetwork/topics/linuxx86-64soft-092277.html  e de permiss\u00e3o de execu\u00e7\u00e3o nos mesmos.  PS : basic, sqlplus, devel  Para efetuar a instala\u00e7\u00e3o, vamos usar o alien   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 sudo apt-get install alien libaio1 libaio1:i386\n\nsudo alien -i oracle-instantclient12.2-basic-12.2.0.1.0-1.x86_64.rpm\nsudo alien -i oracle-instantclient12.2-devel-12.2.0.1.0-1.x86_64.rpm\nsudo alien -i oracle-instantclient12.2-sqlplus-12.2.0.1.0-1.x86_64.rpm\n\n  echo   'export LD_LIBRARY_PATH=/usr/lib/oracle/12.2/client64/lib/${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}'  >> ~/.profile\n\n sudo vi /etc/ld.so.conf.d/oracle.conf  &&  sudo chmod o+r /etc/ld.so.conf.d/oracle.conf # Add This on /etc/ld.so.conf.d/oracle.conf \n /usr/lib/oracle/12.2/client64/lib/\nsudo ldconfig echo   'export ORACLE_HOME=/usr/lib/oracle/12.2/client64'  >> ~/.profile echo   'export TNS_ADMIN=$ORACLE_HOME/network/admin'  >> ~/.profile echo   'export PATH=$PATH:$ORACLE_HOME/bin'  >> ~/.profile source  ~/.profile\n\nmkdir -p  $TNS_ADMIN \nsudo touch  $TNS_ADMIN /tnsnames.ora\nsudo chmod o+r  $TNS_ADMIN /tnsnames.ora   Adicione os tns no arquivo tnsnames.ora e feito!",
            "title": "Oracle"
        },
        {
            "location": "/servidores/nginx/python/#frontend",
            "text": "Vamos instalar o node 6 e npm para depois adicionar as libs de frontend  1\n2\n3\n4\n5\n6\n7\n8 sudo apt install python-software-properties\ncurl -sL https://deb.nodesource.com/setup_6.x  |  sudo -E bash -\nsudo apt-get install nodejs\n\n~$ node -v\nv4.2.6\n~$ npm -v 3 .5.2   Agora vamos preparar algumas libs para o frontend (compila\u00e7\u00e3o)  1\n2\n3\n4\n5\n6\n7\n8 sudo npm i -g bower gulp yarn @angular/cli\n\n~$ bower -v 1 .8.2\n~$ yarn -v 1 .1.0\n~$ gulp -v [ 11 :08:52 ]  CLI version  3 .9.1",
            "title": "Frontend"
        },
        {
            "location": "/servidores/nginx/python/#backend",
            "text": "Dependencias  1 sudo apt-get install build-essential libssl-dev libffi-dev python3-dev   Instalando o pyenv  1\n2\n3\n4\n5\n6\n7\n8 sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev  \\ \nlibreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev  \\ \nxz-utils tk-dev\n\ngit clone https://github.com/pyenv/pyenv.git ~/.pyenv echo   'export PYENV_ROOT=\"$HOME/.pyenv\"'  >> ~/.profile echo   'export PATH=\"$PYENV_ROOT/bin:$PATH\"'  >> ~/.profile echo  -e  'if command -v pyenv 1>/dev/null 2>&1; then\\n  eval \"$(pyenv init -)\"\\nfi'  >> ~/.profile   Vamos instalar o python 3.6.2  1\n2\n3 pyenv install  3 .6.2\npyenv global  3 .6.2\npython -V",
            "title": "Backend"
        },
        {
            "location": "/servidores/nginx/python/#uwsgi",
            "text": "PS: Caso esteja com virtualenv ativo, desative o mesmo  deactive  Instale o uwsgi  1 pip install uwsgi   Precisamos configurar um arquivo de uwsgi para cada projeto.  Nesse exemplo vamos utilizar as seguintes propriedades:   socket: Arquivo que ser\u00e1 gerado o socket para comunica\u00e7\u00e3o   master: Ativar Processos master  wsgi-file: Arquivo uwsgi do projeto django  processes: Quantidade de Processos  enable-threads: Ativar Threads  threads: Quantidades de threads por processo  max_requests: Maximo de requisi\u00e7\u00f5es  harakiri:   stats: status do socket  stats-http: mostra status no http  uid: usu\u00e1rio do SO  gid: grupo do SO  chmod-socket: permiss\u00e3o do Socket  chdir: diretorio raiz do projeto  home: diretorio do virutalenv  logger: arquivo de log  vacuum: Limpar ao fechar  ignore-write-errors: Ignorar escrita de erros  disable-write-exception: Desativar escrita de exce\u00e7\u00f5es   Nosso arquivo de exemplo que ficara no projeto1 ( raiz do projeto/uwsgi.ini ), ficar\u00e1 com a seguinte estrutura:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20 [uwsgi]  socket   =   projeto1.sock  master   =   true  wsgi-file   =   projeto1/wsgi.py  processes   =   2  enable-threads   =   true  threads   =   10  max_requests   =   100  harakiri   =   60  stats   =   127.0.0.1:9191  stats-http   =   true  uid   =   www-data  gid   =   www-data  chmod-socket   =   666  chdir   =   /home/deploy/projects/projeto1  home   =   /home/deploy/projects/projeto1/.venv/  logger   =   file:/home/deploy/projects/projeto1/logs/uwsgi.log  vacuum   =   true  ignore-write-errors   =   true  disable-write-exception   =   true    Importante lembra que em  stats  a porta n\u00e3o pode repetir para quando configurar uma outra aplica\u00e7\u00e3o  uwsgi_params  Na documenta\u00e7\u00e3o oficial, precisamos definir alguns parametros para integrar com nginx  https://github.com/nginx/nginx/blob/master/conf/uwsgi_params  Vamos criar o arquivo uwsgi_params.conf na raiz do projeto com o seguinte conte\u00fado:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 uwsgi_param  QUERY_STRING        $query_string ; \nuwsgi_param  REQUEST_METHOD      $request_method ; \nuwsgi_param  CONTENT_TYPE        $content_type ; \nuwsgi_param  CONTENT_LENGTH      $content_length ; \n\nuwsgi_param  REQUEST_URI         $request_uri ; \nuwsgi_param  PATH_INFO           $document_uri ; \nuwsgi_param  DOCUMENT_ROOT       $document_root ; \nuwsgi_param  SERVER_PROTOCOL     $server_protocol ; \nuwsgi_param  REQUEST_SCHEME      $scheme ; \nuwsgi_param  HTTPS               $https  if_not_empty ; \n\nuwsgi_param  REMOTE_ADDR         $remote_addr ; \nuwsgi_param  REMOTE_PORT         $remote_port ; \nuwsgi_param  SERVER_PORT         $server_port ; \nuwsgi_param  SERVER_NAME         $server_name ;    Para testar se esta tudo funcionando, vamos rodar o seguinte comando:  1\n2 cd %diretorio_projeto%\nuwsgi --ini uwsgi.ini",
            "title": "uWsgi"
        },
        {
            "location": "/servidores/nginx/python/#nginx",
            "text": "Vamos instalar o servidor nginx:  1 sudo apt-get install nginx   Ap\u00f3s instalado, acesse o diretorio  cd /etc/nginx/sites-avaliable  Vamos criar a configura\u00e7\u00e3o  touch projeto1.conf   Servidor web para frontend na porta 80  Servidor web para backend mapeando as rotas /statics e / utilizando socket para integrar com uwsgi   Importante ter o dns configurado para utiliza\u00e7\u00e3o de nomes (exemplo: projeto1.seudominio.com)   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55 # projeto1.conf  # Frontend server \nserver  { \n     # porta \n    listen  80 ; \n     # nome DNS \n    server_name projeto1.seudominio.com ; \n     # caminho raiz \n    root /home/deploy/projects/projeto1/frontend/dist ; \n     # index file \n    index index.html ; \n     # locais \n    location /  { \n        try_files  $uri   $uri /  = 404 ; \n     }  }  # Backend server \nserver  { \n     # porta \n    listen  8000 ; \n     # nome DNS \n    server_name projeto1.seudominio.com ; \n     # charset \n    charset utf-8 ; \n     # configs \n    client_body_in_file_only clean ; \n    client_body_buffer_size 32M ; \n    sendfile on ; \n    keepalive_timeout  120 ; \n    send_timeout 300s ; \n    client_max_body_size 300M ; \n\n     # local /static \n    location /static  { \n         alias  /home/deploy/projects/projeto1/static ; \n     } \n\n     # local / \n    location /  { \n         # socket \n        uwsgi_pass projeto1 ; \n         # configs \n        proxy_read_timeout 40s ; \n        proxy_send_timeout 40s ; \n        uwsgi_ignore_client_abort on ; \n         # params \n        include     /home/deploy/projects/projeto1/uwsgi_params ; \n     }  }  # Reader socket \nupstream projeto1  { \n    server unix:///home/deploy/projects/projeto1/projeto1.sock ;  }    Feito isso vamos ativar o site e reiniciar o nginx  1\n2 sudo ln -s /etc/nginx/sites-avaliable/projeto1.conf /etc/nginx/sites-enable/\nsudo /etc/init.d/nginx restart   Para testar, abra o navegador e acesse o endere\u00e7o  projeto1.seudominio.com:8000  e voc\u00ea ira recever um erro 502 Bad Gateway  Isso ocorre porque o socket do uwsgi n\u00e3o est\u00e1 em execu\u00e7\u00e3o. Vamos no projeto e rodar o mesmo.  1\n2 cd  raiz_projeto\nuwsgi --ini uwsgi.ini   Acesse novamente e o site estara funcionando!",
            "title": "nginx"
        },
        {
            "location": "/servidores/nginx/python/#supervisor",
            "text": "Para n\u00e3o ter a necessidade de ficar levantando o uwsgi e nginx toda vez vamos automatizar essa tarefa com o supervisor.  Para instalar e configurar  1\n2 sudo apt-get install supervisor\nsudo touch /etc/supervisor/conf.d/projeto1.conf   Dentro do arquivo, vamos colocar a seguinte estrutura   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 [ program:projeto1 ]  user   =  deploy command   =  /home/deploy/.pyenv/shims/uwsgi --ini /home/deploy/projects/projeto1/uwsgi.ini autostart   =   true  environment = LD_LIBRARY_PATH = '/usr/lib/oracle/12.2/client64/lib/${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}' ,ORACLE_HOME = '/usr/lib/oracle/12.2/client64/' ,TNS_ADMIN = '$ORACLE_HOME/network/admin'  [ program:nginx ]  command   =  /usr/sbin/nginx user   =  root autostart   =   true    Finalizado, vamos instalar o programa no supervisor  1\n2 sudo supervisorctl reread\nsudo supervisorctl start all  \nFeito isso, sitema configurado e pronto!",
            "title": "Supervisor"
        },
        {
            "location": "/servidores/nginx/python/#links",
            "text": "http://uwsgi-docs.readthedocs.io/en/latest/  https://docs.djangoproject.com/pt-br/1.11/howto/deployment/wsgi/uwsgi/  https://www.digitalocean.com/community/tutorials/how-to-serve-django-applications-with-uwsgi-and-nginx-on-ubuntu-16-04",
            "title": "Links"
        },
        {
            "location": "/servidores/nginx/php/",
            "text": "Ubuntu + Nginx + PHP + PHP-fpm + Oracle\n\u00b6\n\n\nPrimeiro vale lembrar que esse \u00e9 mais um guia do que um tutorial!\n\n\n\n\nRevisado e testado em 2017-12-06\n\n\n\n\nPreparando servidor\n\u00b6\n\n\nCriando usu\u00e1rio\n\u00b6\n\n\n\n\nRevisado e testado em 2017-12-06\n\n\n\n\n1\n2\nuseradd -m -d /home/deploy -G adm,www-data,sudo -s /bin/bash deploy\npasswd deploy\n\n\n\n\n\n\nPara confirmar as pemiss\u00f5es, verifique o arquivo \n/etc/passwd\n\n\n1\ndeploy:x:1001:1001::/home/deploy:/bin/bash\n\n\n\n\n\n\nVerifique se o arquivo /home/deploy/.profile est\u00e1 com as seguintes informa\u00e7\u00f5es\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n# ~/.profile: executed by the command interpreter for login shells.\n\n\n# This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login\n\n\n# exists.\n\n\n# see /usr/share/doc/bash/examples/startup-files for examples.\n\n\n# the files are located in the bash-doc package.\n\n\n\n# the default umask is set in /etc/profile; for setting the umask\n\n\n# for ssh logins, install and configure the libpam-umask package.\n\n\n#umask 022\n\n\n\n# if running bash\n\n\nif\n \n[\n -n \n\"\n$BASH_VERSION\n\"\n \n]\n;\n \nthen\n\n\n    \n# include .bashrc if it exists\n\n\n    \nif\n \n[\n -f \n\"\n$HOME\n/.bashrc\"\n \n]\n;\n \nthen\n\n\n        . \n\"\n$HOME\n/.bashrc\"\n\n\n    \nfi\n\n\nfi\n\n\n\n\n# set PATH so it includes user's private bin directories\n\n\nPATH\n=\n\"\n$HOME\n/bin:\n$HOME\n/.local/bin:\n$PATH\n\"\n\n\n\n\n\n\n\nRede\n\u00b6\n\n\n\n\nTroque o usu\u00e1rio\n\n\nAs configura\u00e7\u00f5es abaixo poder\u00e3o ser feitas com usu\u00e1rio \ndeploy\n pois o mesmo foi criado como adminitrador!!!\n\n\n\n\nAdicionando dns e dominio de busca\n\n\n1\n2\n3\n4\n5\nsudo nano /etc/resolvconf/resolv.conf.d/tail\n\n-- Add\nnameserver \n192\n.168.0.16\nsearch gruposcheffer.com\n\n\n\n\n\n\nGit\n\u00b6\n\n\nPrimeiro vamo configurar o git. Para isso vamos criar a chave ssh e configurar o usu\u00e1rio e email global\n\n\nVamos Gerar a Chave\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nssh-keygen -t rsa -C \n\"email@dominio.com\"\n\n\nGenerating public/private rsa key pair.\nEnter file in which to save the key \n(\n/home/deploy/.ssh/id_rsa\n)\n:\n[\nEnter\n]\n\nCreated directory \n'/home/deploy/.ssh'\n.\nEnter passphrase \n(\nempty \nfor\n no passphrase\n)\n:\n[\nSenha\n]\n\nEnter same passphrase again:\n[\nRepete a Senha\n]\n\nYour identification has been saved in /home/deploy/.ssh/id_rsa.\nYour public key has been saved in /home/deploy/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:***************************** ti@gruposcheffer.com.br\n\n\n\n\n\n\nAplique a chave no seu servidor de vers\u00f5es (gitlab, ou github)\n\n\nConfigurando usu\u00e1rio global\n\n\n1\n2\ngit config --global user.name \n\"Seu Nome\"\n\ngit config --global user.email \n\"email@dominio.com\"\n\n\n\n\n\n\n\nOracle\n\u00b6\n\n\n\n\nObs\n\n\nEssa foi a forma mais rapida de instalar e configurar o oracle no ubuntu!!!\n\n\n\n\nRefer\u00eancia\n \nhttps://help.ubuntu.com/community/Oracle%20Instant%20Client\n\n\nBaixe os rpm's do site \nhttp://www.oracle.com/technetwork/topics/linuxx86-64soft-092277.html\n e de permiss\u00e3o de execu\u00e7\u00e3o nos mesmos.\n\n\nPS\n: basic, sqlplus, devel\n\n\nPara efetuar a instala\u00e7\u00e3o, vamos usar o alien\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\nsudo apt-get install alien libaio1 libaio1:i386\n\nsudo alien -i oracle-instantclient12.2-basic-12.2.0.1.0-1.x86_64.rpm\nsudo alien -i oracle-instantclient12.2-devel-12.2.0.1.0-1.x86_64.rpm\nsudo alien -i oracle-instantclient12.2-sqlplus-12.2.0.1.0-1.x86_64.rpm\n\n \necho\n \n'export LD_LIBRARY_PATH=/usr/lib/oracle/12.2/client64/lib/${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}'\n >> ~/.profile\n\n sudo vi /etc/ld.so.conf.d/oracle.conf \n&&\n sudo chmod o+r /etc/ld.so.conf.d/oracle.conf\n\n\n# Add This on /etc/ld.so.conf.d/oracle.conf\n\n /usr/lib/oracle/12.2/client64/lib/\nsudo ldconfig\n\n\necho\n \n'export ORACLE_HOME=/usr/lib/oracle/12.2/client64'\n >> ~/.profile\n\necho\n \n'export TNS_ADMIN=$ORACLE_HOME/network/admin'\n >> ~/.profile\n\necho\n \n'export PATH=$PATH:$ORACLE_HOME/bin'\n >> ~/.profile\n\n\nsource\n ~/.profile\n\nmkdir -p \n$TNS_ADMIN\n\nsudo touch \n$TNS_ADMIN\n/tnsnames.ora\nsudo chmod o+r \n$TNS_ADMIN\n/tnsnames.ora\n\n\n\n\n\n\nLDConfig\n\n\n1\nsudo vi /etc/ld.so.conf.d/oracle.conf\n\n\n\n\nAdicione o camino \n/usr/lib/oracle/12.2/client64/lib\n e salve o arquivo. Ap\u00f3s isso, recarregue as configura\u00e7\u00f5es com \nsudo ldconfig\n\n\nAdicione os tns no arquivo tnsnames.ora e feito!\n\n\nBackend\n\u00b6\n\n\nDependencias\n\n\n1\n2\n3\nsudo add-apt-repository ppa:ondrej/php\nsudo apt-get install software-properties-common\nsudo apt-get update\n\n\n\n\n\n\nPHP 5.6\n\u00b6\n\n\nInstalando o PHP\n\n\n1\nsudo apt-get install php5.6 php5.6-dev php5.6-dev php5.6-fpm php5.6-xml\n\n\n\n\n\n\nVamos deixar o servi\u00e7o do \nfpm\n para inicializar junto com o SO\n\n\n1\nsudo chkconfig php-fpm on\n\n\n\n\n\n\nAgora vamos instalar o oci8\n\n\n\n\nRecomenta\u00e7\u00e3o da pecl\n\n\nUse the OCI8 extension to access Oracle Database. Use 'pecl install oci8' to install for PHP 7. Use 'pecl install oci8-2.0.12' to install for PHP 5.2 - PHP 5.6. Use  pecl install oci8-1.4.10' to install for PHP 4.3.9 - PHP 5.1. The OCI8 extension can be linked with Oracle client libraries from Oracle Database 12, 11, or 10.2. These libraries are found in your database installation, or in the free Oracle Instant Client from \nhttp://www.oracle.com/technetwork/database/features/instant-client/\n.\n\nOracle's standard cross-version connectivity applies. For example, PHP OCI8 linked with Instant Client 11.2 can connect to Oracle Database 9.2 onward. See Oracle's note \"Oracle Client / Server Interoperability Support\" (ID 207303.1) for details.\n\n\n\n\n1\n2\n3\n4\n5\n6\nsudo pecl download oci8-1.4.10\ntar zxvf oci8-1.4.10.tgz\n\ncd\n oci8-1.4.10\nphpize\n./configure --with-oci8\n=\ninstantclient,\n$ORACLE_HOME\n/lib\nsudo make install\n\n\n\n\n\n\nCaso tudo correto, vamos habilitar a lib no \nphp-cli\n e  \nphp-fpm\n\n\nPrimeiro, vamos criar a configura\u00e7\u00e3o da lib\n\n1\n2\ncd\n /etc/php/5.6/mods-available\nsudo vi oci.ini\n\n\n\n\n\nDentro do arquivo, informe o conteudo:\n\n1\nextension=oci8.so\n\n\n\n\n\nSalve o arquivo e vamos ativar as extens\u00f5es\n\n\nPHP-Cli\n\u00b6\n\n\n1\n2\ncd\n /etc/php/5.6/cli/conf.d/\nsudo ln -s /etc/php/5.6/mods-available/oci.ini \n20\n-oci.ini\n\n\n\n\n\n\nTeste com o comando para verificar se a extens\u00e3o esta ativa\n\n\n1\nphp -i \n|\n grep oci8\n\n\n\n\n\n\nPHP-Fpm\n\u00b6\n\n\n1\n2\ncd\n /etc/php/5.6/fpm/conf.d/\nsudo ln -s /etc/php/5.6/mods-available/oci.ini \n20\n-oci.ini\n\n\n\n\n\n\nnginx\n\u00b6\n\n\nVamos instalar o servidor nginx:\n\n\n1\nsudo apt-get install nginx\n\n\n\n\n\n\nAp\u00f3s instalado, acesse o diretorio \ncd /etc/nginx/sites-avaliable\n\n\nVamos criar a configura\u00e7\u00e3o \ntouch php.conf\n\n\nPHP\n\u00b6\n\n\nImportante ter o dns configurado para utiliza\u00e7\u00e3o de nomes (exemplo: php.seudominio.com)\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n# php.conf\n\n\nserver \n{\n\n    listen \n80\n;\n\n    server_name php.seudominio.com\n;\n\n\n    root /home/deploy/projects/php\n;\n\n\n    index index.php index.html\n;\n\n\n    location ~ \n\\.\nphp$ \n{\n\n        fastcgi_pass unix:/var/run/php/php5.6-fpm.sock\n;\n\n        fastcgi_param SCRIPT_FILENAME \n$document_root$fastcgi_script_name\n;\n\n        include fastcgi_params\n;\n                \n    \n}\n\n\n}\n\n\n\n\n\n\n\nCODEIGNITER\n\u00b6\n\n\nImportante ter o dns configurado para utiliza\u00e7\u00e3o de nomes (exemplo: php.seudominio.com)\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n# php.conf\n\n\nserver \n{\n\n    listen \n80\n;\n\n    server_name php.seudominio.com\n;\n\n\n    root /home/deploy/projects/php\n;\n\n\n    index index.php index.html\n;\n\n\n    location / \n{\n\n        try_files \n$uri\n \n$uri\n/ /index.php\n;\n\n\n        \nlocation\n \n=\n /index.php \n{\n\n\n            fastcgi_pass unix:/var/run/php/php5.6-fpm.sock\n;\n\n            fastcgi_param SCRIPT_FILENAME /home/deploy/projects/php\n$fastcgi_script_name\n;\n\n            include fastcgi_params\n;\n\n        \n}\n\n    \n}\n\n\n\n}\n\n\n\n\n\n\n\nFeito isso vamos ativar o site e reiniciar o nginx\n\n\n1\n2\nsudo ln -s /etc/nginx/sites-avaliable/php.conf /etc/nginx/sites-enable/\nsudo /etc/init.d/nginx restart\n\n\n\n\n\n\nPara testar, abra o navegador e acesse o endere\u00e7o \nphp.seudominio.com\n\n\nLinks\n\u00b6\n\n\n\n\nhttps://www.digitalocean.com/community/tutorials/como-instalar-linux-nginx-mysql-php-pilha-lemp-no-ubuntu-16-04-pt\n\n\nhttps://askubuntu.com/questions/927026/install-php-fpm-5-6-on-ubuntu-xenial-16-04\n\n\nhttps://rosemberg.net.br/pt/instalando-pdo-oracle-e-oci8-do-php7-no-ubuntumint-oracle-11-2/",
            "title": "PHP"
        },
        {
            "location": "/servidores/nginx/php/#ubuntu-nginx-php-php-fpm-oracle",
            "text": "Primeiro vale lembrar que esse \u00e9 mais um guia do que um tutorial!   Revisado e testado em 2017-12-06",
            "title": "Ubuntu + Nginx + PHP + PHP-fpm + Oracle"
        },
        {
            "location": "/servidores/nginx/php/#preparando-servidor",
            "text": "",
            "title": "Preparando servidor"
        },
        {
            "location": "/servidores/nginx/php/#criando-usuario",
            "text": "Revisado e testado em 2017-12-06   1\n2 useradd -m -d /home/deploy -G adm,www-data,sudo -s /bin/bash deploy\npasswd deploy   Para confirmar as pemiss\u00f5es, verifique o arquivo  /etc/passwd  1 deploy:x:1001:1001::/home/deploy:/bin/bash   Verifique se o arquivo /home/deploy/.profile est\u00e1 com as seguintes informa\u00e7\u00f5es   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20 # ~/.profile: executed by the command interpreter for login shells.  # This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login  # exists.  # see /usr/share/doc/bash/examples/startup-files for examples.  # the files are located in the bash-doc package.  # the default umask is set in /etc/profile; for setting the umask  # for ssh logins, install and configure the libpam-umask package.  #umask 022  # if running bash  if   [  -n  \" $BASH_VERSION \"   ] ;   then       # include .bashrc if it exists       if   [  -f  \" $HOME /.bashrc\"   ] ;   then          .  \" $HOME /.bashrc\"       fi  fi   # set PATH so it includes user's private bin directories  PATH = \" $HOME /bin: $HOME /.local/bin: $PATH \"",
            "title": "Criando usu\u00e1rio"
        },
        {
            "location": "/servidores/nginx/php/#rede",
            "text": "Troque o usu\u00e1rio  As configura\u00e7\u00f5es abaixo poder\u00e3o ser feitas com usu\u00e1rio  deploy  pois o mesmo foi criado como adminitrador!!!   Adicionando dns e dominio de busca  1\n2\n3\n4\n5 sudo nano /etc/resolvconf/resolv.conf.d/tail\n\n-- Add\nnameserver  192 .168.0.16\nsearch gruposcheffer.com",
            "title": "Rede"
        },
        {
            "location": "/servidores/nginx/php/#git",
            "text": "Primeiro vamo configurar o git. Para isso vamos criar a chave ssh e configurar o usu\u00e1rio e email global  Vamos Gerar a Chave   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 ssh-keygen -t rsa -C  \"email@dominio.com\" \n\nGenerating public/private rsa key pair.\nEnter file in which to save the key  ( /home/deploy/.ssh/id_rsa ) : [ Enter ] \nCreated directory  '/home/deploy/.ssh' .\nEnter passphrase  ( empty  for  no passphrase ) : [ Senha ] \nEnter same passphrase again: [ Repete a Senha ] \nYour identification has been saved in /home/deploy/.ssh/id_rsa.\nYour public key has been saved in /home/deploy/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:***************************** ti@gruposcheffer.com.br   Aplique a chave no seu servidor de vers\u00f5es (gitlab, ou github)  Configurando usu\u00e1rio global  1\n2 git config --global user.name  \"Seu Nome\" \ngit config --global user.email  \"email@dominio.com\"",
            "title": "Git"
        },
        {
            "location": "/servidores/nginx/php/#oracle",
            "text": "Obs  Essa foi a forma mais rapida de instalar e configurar o oracle no ubuntu!!!   Refer\u00eancia   https://help.ubuntu.com/community/Oracle%20Instant%20Client  Baixe os rpm's do site  http://www.oracle.com/technetwork/topics/linuxx86-64soft-092277.html  e de permiss\u00e3o de execu\u00e7\u00e3o nos mesmos.  PS : basic, sqlplus, devel  Para efetuar a instala\u00e7\u00e3o, vamos usar o alien   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 sudo apt-get install alien libaio1 libaio1:i386\n\nsudo alien -i oracle-instantclient12.2-basic-12.2.0.1.0-1.x86_64.rpm\nsudo alien -i oracle-instantclient12.2-devel-12.2.0.1.0-1.x86_64.rpm\nsudo alien -i oracle-instantclient12.2-sqlplus-12.2.0.1.0-1.x86_64.rpm\n\n  echo   'export LD_LIBRARY_PATH=/usr/lib/oracle/12.2/client64/lib/${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}'  >> ~/.profile\n\n sudo vi /etc/ld.so.conf.d/oracle.conf  &&  sudo chmod o+r /etc/ld.so.conf.d/oracle.conf # Add This on /etc/ld.so.conf.d/oracle.conf \n /usr/lib/oracle/12.2/client64/lib/\nsudo ldconfig echo   'export ORACLE_HOME=/usr/lib/oracle/12.2/client64'  >> ~/.profile echo   'export TNS_ADMIN=$ORACLE_HOME/network/admin'  >> ~/.profile echo   'export PATH=$PATH:$ORACLE_HOME/bin'  >> ~/.profile source  ~/.profile\n\nmkdir -p  $TNS_ADMIN \nsudo touch  $TNS_ADMIN /tnsnames.ora\nsudo chmod o+r  $TNS_ADMIN /tnsnames.ora   LDConfig  1 sudo vi /etc/ld.so.conf.d/oracle.conf  \nAdicione o camino  /usr/lib/oracle/12.2/client64/lib  e salve o arquivo. Ap\u00f3s isso, recarregue as configura\u00e7\u00f5es com  sudo ldconfig  Adicione os tns no arquivo tnsnames.ora e feito!",
            "title": "Oracle"
        },
        {
            "location": "/servidores/nginx/php/#backend",
            "text": "Dependencias  1\n2\n3 sudo add-apt-repository ppa:ondrej/php\nsudo apt-get install software-properties-common\nsudo apt-get update",
            "title": "Backend"
        },
        {
            "location": "/servidores/nginx/php/#php-56",
            "text": "Instalando o PHP  1 sudo apt-get install php5.6 php5.6-dev php5.6-dev php5.6-fpm php5.6-xml   Vamos deixar o servi\u00e7o do  fpm  para inicializar junto com o SO  1 sudo chkconfig php-fpm on   Agora vamos instalar o oci8   Recomenta\u00e7\u00e3o da pecl  Use the OCI8 extension to access Oracle Database. Use 'pecl install oci8' to install for PHP 7. Use 'pecl install oci8-2.0.12' to install for PHP 5.2 - PHP 5.6. Use  pecl install oci8-1.4.10' to install for PHP 4.3.9 - PHP 5.1. The OCI8 extension can be linked with Oracle client libraries from Oracle Database 12, 11, or 10.2. These libraries are found in your database installation, or in the free Oracle Instant Client from  http://www.oracle.com/technetwork/database/features/instant-client/ . \nOracle's standard cross-version connectivity applies. For example, PHP OCI8 linked with Instant Client 11.2 can connect to Oracle Database 9.2 onward. See Oracle's note \"Oracle Client / Server Interoperability Support\" (ID 207303.1) for details.   1\n2\n3\n4\n5\n6 sudo pecl download oci8-1.4.10\ntar zxvf oci8-1.4.10.tgz cd  oci8-1.4.10\nphpize\n./configure --with-oci8 = instantclient, $ORACLE_HOME /lib\nsudo make install   Caso tudo correto, vamos habilitar a lib no  php-cli  e   php-fpm  Primeiro, vamos criar a configura\u00e7\u00e3o da lib 1\n2 cd  /etc/php/5.6/mods-available\nsudo vi oci.ini   Dentro do arquivo, informe o conteudo: 1 extension=oci8.so   Salve o arquivo e vamos ativar as extens\u00f5es",
            "title": "PHP 5.6"
        },
        {
            "location": "/servidores/nginx/php/#php-cli",
            "text": "1\n2 cd  /etc/php/5.6/cli/conf.d/\nsudo ln -s /etc/php/5.6/mods-available/oci.ini  20 -oci.ini   Teste com o comando para verificar se a extens\u00e3o esta ativa  1 php -i  |  grep oci8",
            "title": "PHP-Cli"
        },
        {
            "location": "/servidores/nginx/php/#php-fpm",
            "text": "1\n2 cd  /etc/php/5.6/fpm/conf.d/\nsudo ln -s /etc/php/5.6/mods-available/oci.ini  20 -oci.ini",
            "title": "PHP-Fpm"
        },
        {
            "location": "/servidores/nginx/php/#nginx",
            "text": "Vamos instalar o servidor nginx:  1 sudo apt-get install nginx   Ap\u00f3s instalado, acesse o diretorio  cd /etc/nginx/sites-avaliable  Vamos criar a configura\u00e7\u00e3o  touch php.conf",
            "title": "nginx"
        },
        {
            "location": "/servidores/nginx/php/#php",
            "text": "Importante ter o dns configurado para utiliza\u00e7\u00e3o de nomes (exemplo: php.seudominio.com)   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 # php.conf \n\nserver  { \n    listen  80 ; \n    server_name php.seudominio.com ; \n\n    root /home/deploy/projects/php ; \n\n    index index.php index.html ; \n\n    location ~  \\. php$  { \n        fastcgi_pass unix:/var/run/php/php5.6-fpm.sock ; \n        fastcgi_param SCRIPT_FILENAME  $document_root$fastcgi_script_name ; \n        include fastcgi_params ;                 \n     }  }",
            "title": "PHP"
        },
        {
            "location": "/servidores/nginx/php/#codeigniter",
            "text": "Importante ter o dns configurado para utiliza\u00e7\u00e3o de nomes (exemplo: php.seudominio.com)   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22 # php.conf \n\nserver  { \n    listen  80 ; \n    server_name php.seudominio.com ; \n\n    root /home/deploy/projects/php ; \n\n    index index.php index.html ; \n\n    location /  { \n        try_files  $uri   $uri / /index.php ; \n\n         location   =  /index.php  { \n\n            fastcgi_pass unix:/var/run/php/php5.6-fpm.sock ; \n            fastcgi_param SCRIPT_FILENAME /home/deploy/projects/php $fastcgi_script_name ; \n            include fastcgi_params ; \n         } \n     }  }    Feito isso vamos ativar o site e reiniciar o nginx  1\n2 sudo ln -s /etc/nginx/sites-avaliable/php.conf /etc/nginx/sites-enable/\nsudo /etc/init.d/nginx restart   Para testar, abra o navegador e acesse o endere\u00e7o  php.seudominio.com",
            "title": "CODEIGNITER"
        },
        {
            "location": "/servidores/nginx/php/#links",
            "text": "https://www.digitalocean.com/community/tutorials/como-instalar-linux-nginx-mysql-php-pilha-lemp-no-ubuntu-16-04-pt  https://askubuntu.com/questions/927026/install-php-fpm-5-6-on-ubuntu-xenial-16-04  https://rosemberg.net.br/pt/instalando-pdo-oracle-e-oci8-do-php7-no-ubuntumint-oracle-11-2/",
            "title": "Links"
        },
        {
            "location": "/servidores/apache/python/",
            "text": "Ubuntu 16.10 + Apache2 + Python + WSGI + Oracle\n\u00b6\n\n\nVamos instalar um servidor ubuntu 16.10 para hospedar p\u00e1ginas web desenvolvidas em python com framework django.\n\n\n\n\nRevisado e testado em 2017-06-28\n\n\n\n\nAtuliza\u00e7\u00e3o e pequenas corre\u00e7\u00f5es\n\u00b6\n\n\nAntes de come\u00e7ar, vamos resolver o problema de linguagem da vers\u00e3o 16.10\n\n\nComo \nroot\n\n\n1\n2\n3\napt-get install language-pack-pt\nlocale-gen pt_BR.UTF-8\nreboot\n\n\n\n\n\n\nVamos efetuar as atualiza\u00e7\u00f5es\n\n\n1\n2\n3\napt-get update\napt-get upgrade\napt-get dist-upgrade\n\n\n\n\n\n\nUsu\u00e1rios\n\u00b6\n\n\nAgora criamos o usu\u00e1rio \ndeploy\n\n\n1\n2\nuseradd -m -d /home/deploy -G adm,www-data,sudo -s /bin/bash deploy\npasswd deploy\n\n\n\n\n\n\nS\u00f3 para confirmar, verifique em \n/etc/passwd\n se ficou dessa forma\n\n\n1\ndeploy:x:1001:1001::/home/deploy:/bin/bash\n\n\n\n\n\n\nAgora edite o arquivo \nnano /home/deploy/.profile\n e verifique se existe as seguinte informa\u00e7\u00f5es\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n# ~/.profile: executed by the command interpreter for login shells.\n\n\n# This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login\n\n\n# exists.\n\n\n# see /usr/share/doc/bash/examples/startup-files for examples.\n\n\n# the files are located in the bash-doc package.\n\n\n\n# the default umask is set in /etc/profile; for setting the umask\n\n\n# for ssh logins, install and configure the libpam-umask package.\n\n\n#umask 022\n\n\n\n# if running bash\n\n\nif\n \n[\n -n \n\"\n$BASH_VERSION\n\"\n \n]\n;\n \nthen\n\n\n    \n# include .bashrc if it exists\n\n\n    \nif\n \n[\n -f \n\"\n$HOME\n/.bashrc\"\n \n]\n;\n \nthen\n\n\n        . \n\"\n$HOME\n/.bashrc\"\n\n\n    \nfi\n\n\nfi\n\n\n\n\n# set PATH so it includes user's private bin directories\n\n\nPATH\n=\n\"\n$HOME\n/bin:\n$HOME\n/.local/bin:\n$PATH\n\"\n\n\n\n\n\n\n\nPreparando o servidor\n\u00b6\n\n\n\n\nTroque o usu\u00e1rio\n\n\nAs configura\u00e7\u00f5es abaixo poder\u00e3o ser feitas com usu\u00e1rio \ndeploy\n pois o mesmo foi criado como adminitrador!!!\n\n\n\n\nEfetue as configura\u00e7\u00f5es de rede para adicionar o endere\u00e7o de IP do servidor.\n\n\nPrimeiro, vamos preparar o ambiente de rede. Para isso, vamos determinar o endere\u00e7o de IP no arquivo \n/etc/host\n\n\n1\n2\n3\n127.0.0.1       localhost\n127.0.1.1       nome_do_server\n192.168.0.IP    nome_do_server\n\n\n\n\n\n\nAgora vamos registrar o dominio de busca para que procure na rede interna, alterando o arquivo \nsudo nano /etc/resolvconf/resolv.conf.d/base\n\n\n1\nsearch domain_name.com\n\n\n\n\n\n\nAgora rode o comando para aplicar as resolu\u00e7\u00f5es \nsudo resolvconf -u\n\n\nVamos reiniciar os servi\u00e7os de rede e efetuar os testes\n\n\n1\n2\n3\n4\nsudo /etc/init.d/networking restart\n\nnslookup nome_do_server\nnslookup nome_do_server.domain_name.com\n\n\n\n\n\n\nPrimeiro o GIT\n\u00b6\n\n\nPara instalar o git rode o comando \nsudo apt-get install git\n\n\nAp\u00f3s isso, vamos efetuar a configura\u00e7\u00e3o das vari\u00e1veis globais\n\n\n1\n2\ngit config --global user.name \n\"Seu Nome\"\n\ngit config --global user.email \n\"seuemail@domain.com\"\n\n\n\n\n\n\n\nAgora vamos adicionar uma chave publica para poder efetuar intera\u00e7\u00e3o com os projetos\n\n\n1\nssh-keygen -t rsa -C \n\"email@domain\"\n\n\n\n\n\n\n\nCopie a chave (\ncat ~/.ssh/id_rsa.pub\n) para configura\u00e7\u00e3o de SSH na sua conta no reposit\u00f3rio online\n\n\nOracle Client\n\u00b6\n\n\nPara instalar o oracle, baixe os arquivos do oracle.com (instant_client linux_x64_x86 .rpm)\n\n\n\n\nLink para download\n\n\n\n\noracle-instantclient11.2-basic-11.2.0.3.0-1.x86_64.rpm\n\n\noracle-instantclient11.2-devel-11.2.0.4.0-1.x86_64.rpm\n\n\noracle-instantclient11.2-jdbc-11.2.0.4.0-1.x86_64.rpm\n\n\noracle-instantclient11.2-sqlplus-11.2.0.4.0-1.x86_64.rpm\n\n\n\n\n\n\nVamos utilizar o \nalien\n para efetuar a instala\u00e7\u00e3o (\nsudo apt-get install alien\n)\n\n\n1\n2\n3\n4\n5\n6\nsudo apt-get install alien\n\ncd\n diretorio_dos_arquivos.rpm\nsudo alien -i oracle-instantclient11.2-basic-11.2.0.3.0-1.x86_64.rpm\nsudo alien -i oracle-instantclient11.2-devel-11.2.0.4.0-1.x86_64.rpm\nsudo alien -i oracle-instantclient11.2-jdbc-11.2.0.4.0-1.x86_64.rpm\nsudo alien -i oracle-instantclient11.2-sqlplus-11.2.0.4.0-1.x86_64.rpm\n\n\n\n\n\n\nAgora, vamos editar as variaveis de ambiente para configurar algumas coisas que o client do oracle necessita. \nnano ~/.profile\n e adicione as seguintes linhas no final do arquivo:\n\n\n1\n2\n3\n4\n5\n6\n7\n...\n\n\n# ORACLE\n\n\nexport\n \nORACLE_HOME\n=\n/usr/lib/oracle/11.2/client64/\n\nexport\n \nLD_LIBRARY_PATH\n=\n/usr/lib/oracle/11.2/client64/lib\n\nexport\n \nPATH\n=\n$PATH\n:\n$ORACLE_HOME\n/bin\n\nexport\n \nTNS_ADMIN\n=\n$ORACLE_HOME\n/network/admin\n\n\n\n\n\n\nAgora vamos efetuar as configura\u00e7\u00f5es com o comando \nsource ~/.profile\n\n\nPrecisamos criar o diret\u00f3rio para os apelidos de rede (TNS_ADMIN). \nsudo mkdir -p $TNS_ADMIN\n\n\nE por ultimo, precisamos criar o arquivo de tns (tnsnames.ora). \nsudo touch $TNS_ADMIN/tnsnames.ora\n\n\nEdite o mesmo e cole os nomes de rede atuais\n\n\nAntes de rodar o \nsqlplus\n, precisamos instalar a dependencia do \nlibaio.so\n\n\n1\nsudo apt-get install libaio1 libaio-dev\n\n\n\n\n\n\nJavaScript\n\u00b6\n\n\nVamos instalar as dependencias para execu\u00e7\u00f5es dos javascripts\n\n\nPrimeiro, vamos instalar o node\n\n\n1\nsudo apt-get install nodejs npm nodejs-legacy\n\n\n\n\n\n\nFeito isso, vamos testar instando dois pacotes ess\u00eanciais.\n\n1\nsudo npm i -g gulp bower\n\n\n\n\n\nVerificando se esta tudo certo, rode:\n\n\n1\n2\nbower -v\ngulp -v\n\n\n\n\n\n\nPython e VirtualENV\n\u00b6\n\n\nPara n\u00e3o termos problemas de vers\u00f5es do sistema operacional, vamos utilizar o pyenv.\n\n\nAntes de prosseguir a instala\u00e7\u00e3o, precisamos instalar as seguintes depend\u00eancias:\n\n\n1\nsudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils\n\n\n\n\n\n\nAgora vamos efetuar a instala\u00e7\u00e3o do pyenv\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\nsudo apt-get install git python-pip make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev\npip install virtualenvwrapper\n\ngit clone https://github.com/yyuu/pyenv.git ~/.pyenv\ngit clone https://github.com/yyuu/pyenv-virtualenvwrapper.git ~/.pyenv/plugins/pyenv-virtualenvwrapper\n\n\necho\n \n''\n >> ~/.profile\n\necho\n \n'# PYENV'\n >> ~/.profile\n\necho\n \n'export PYENV_ROOT=\"$HOME/.pyenv\"'\n >> ~/.profile\n\necho\n \n'export PATH=\"$PYENV_ROOT/bin:$PATH\"'\n >> ~/.profile\n\necho\n \n'eval \"$(pyenv init -)\"'\n >> ~/.profile\n\necho\n \n'pyenv virtualenvwrapper'\n >> ~/.profile\n\necho\n \n'export WORKON_HOME=~/virtualenvs'\n>> ~/.profile\n\n\n\n\n\n\nAtualize o arquivo com o comando \nsource ~/.profile\n e vamos efetuar a instala\u00e7\u00e3o da vers\u00e3o 3.5.2 do python.\n\n\n1\n2\n3\n4\n5\npyenv install \n3\n.5.2\n\npyenv versions\n* system \n(\nset\n by /root/.pyenv/version\n)\n\n  \n3\n.5.2\n\n\n\n\n\n\nPara ativar a vers\u00e3o 3.5.2, vamos utilizar o comando \npyenv global 3.5.2\n\n\nPara verificar, utilize:\n\n\n1\n2\npython -V\nPython \n3\n.5.2\n\n\n\n\n\n\nApache\n\u00b6\n\n\nInstalando o apache e configurando o module wsgi\n\n\nInstala\u00e7\u00e3o\n\u00b6\n\n\n1\n2\n3\n4\n5\nsudo apt-get install apache2\nsudo apt-get install libapache2-mod-wsgi-py3\n\ncd\n /etc/apache2/mods-enabled/\nsudo ln -sf ../mods-available/wsgi.conf\nsudo ln -sf ../mods-available/wsgi.load\n\n\n\n\n\n\nReinicie o apache \nsudo /etc/init.d/apache2 restart\n\n\nConfigura\u00e7\u00e3o\n\u00b6\n\n\nVamos configurar o o site do projeto (vou usar de exemplo a cota\u00e7\u00e3o web)\n\n\nPrimeiro clonamos o projeto\n\n\n1\n2\ncd\n ~/projects\ngit clone git@gitlab.com:wGalleti/webCotacao.git\n\n\n\n\n\n\nAgora que temos o caminho completo do projeto, \n/home/deploy/projects/webCotacao\n, vamos criar o virtualenv e configurar o os direcionamentos.\n\n\nCriando o virtualenv\n\n\n1\n2\n3\n4\n5\n6\npython -m venv .venv\n\nsource\n .venv/bin/activate\npip install --upgrade pip\npip install -r requirements.txt\ncp env_example .env\npython manage.py \ntest\n\n\n\n\n\n\n\nSe tudo tiver ok, seu projeto est\u00e1 pronto.\n\n\nAgora vamos configurar o apache para servir essa pasta.\n\n\n1\nsudo nano /etc/apache2/sites-enabled/000-default.conf\n\n\n\n\n\n\nVamos deixar o arquivo da seguinte maneira, para servir os arquivos da api (na porta 8000)\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n<VirtualHost *:8000>\n        Alias /static /home/deploy/projects/webCotacao/static\n        <Directory /home/deploy/projects/webCotacao/static >\n            Require all granted\n        </Directory>\n\n        <Directory /home/deploy/projects/webCotacao/cotacao >\n            <Files wsgi.py>\n                Require all granted\n            </Files>\n        </Directory>\n\n        WSGIDaemonProcess cotacaoweb python-home=/home/deploy/projects/webCotacao/.venv python-path=/home/deploy/projects/webCotacao\n        WSGIPassAuthorization On\n        WSGIProcessGroup cotacaoweb\n        WSGIScriptAlias / /home/deploy/projects/webCotacao/cotacao/wsgi.py\n\n        ErrorLog ${APACHE_LOG_DIR}/error_api.log\n        CustomLog ${APACHE_LOG_DIR}/access_api.log combined\n\n</VirtualHost>\n\n\n\n\n\n\nE para servir os arquivos stativos (frontend), ficara da seguinte maneira (na porta 80)\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n<VirtualHost *:80>\n        DocumentRoot /home/deploy/projects/webCotacao/frontend/dist\n\n        <Directory /home/deploy/projects/webCotacao/frontend/dist>\n            Options +Indexes\n            DirectoryIndex index.html\n            Require all granted\n        </Directory>\n\n        ErrorLog ${APACHE_LOG_DIR}/error_site.log\n        CustomLog ${APACHE_LOG_DIR}/access_site.log combined\n\n</VirtualHost>\n\n\n\n\n\n\nAgora precisamos ativar a porta 8000 no apache.\n\n\nPara isso, adicione abaixo do comando \nListen 80\n o comando \nListen 8000\n no arquivo \n/etc/apache2/ports.conf\n e reinicie o apache \n/etc/init.d/apache2 restart\n\n\nUltimos ajustes\n\u00b6\n\n\nPermiss\u00f5es\n\u00b6\n\n\nEdite o arquivo \nsudo nano /etc/group\n e efetue as sequintes altera\u00e7\u00f5es\n\n\nOnde estiver \nwww-data:x:33:\n ficara \nwww-data:x:33:deploy\n\n\nOnde estiver  \ndeploy:x:1001:\n ficara \ndeploy:x:1001:www-data\n\n\nVari\u00e1veis\n\u00b6\n\n\nPara o apache poder interpretar as libs do \noracle_client\n \u00e9 ness\u00e1rio informar no arquivo \n/etc/apache2/envvars\n as vari\u00e1veis do \noracle\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# envvars - default environment variables for apache2ctl\n\n\n...\n\n\nexport\n \nORACLE_HOME\n=\n/usr/lib/oracle/11.2/client64/\n\nexport\n \nLD_LIBRARY_PATH\n=\n/usr/lib/oracle/11.2/client64/lib\n\nexport\n \nPATH\n=\n$PATH\n:\n$ORACLE_HOME\n/bin\n\nexport\n \nTNS_ADMIN\n=\n$ORACLE_HOME\n/network/admin\n\n\n\n\n\n\nReinicie o apache \nsudo /etc/init.d/apache2 restart\n\n\nExtras\n\u00b6\n\n\nPara facilitar a utiliza\u00e7\u00e3o das ferramentas, vamos implementar as seguintes configura\u00e7\u00f5es no arquivo profile \n~/.profile\n\n\n1\n2\n3\n4\n5\n# Alias\n\n\nalias\n \nactive\n=\n'source .venv/bin/activate'\n \n# ativar vitualenv\n\n\nalias\n \ndeactive\n=\n'source ~/.profile'\n \n# desativar virutalenv\n\n\nalias\n \nmanage\n=\n'python $VIRTUAL_ENV/../manage.py'\n \n# chamar somente manage ao inv\u00e9s de python manage.py\n\n\nalias\n \nsqlplus\n=\n'rlwrap sqlplus'\n \n# poder utilizar ultimos comandos no sqlplus\n\n\n\n\n\n\n\nEfetuar as seguintes instala\u00e7\u00f5es \nsudo apt-get install rlwrap nmon htop\n\n\nNMON e HTOP\n\u00b6\n\n\nVamos utilizar essas ferramentas para monitoramento do sistema operacional.\n\n\nO Htop, podemos analisar desempenho de processador, mem\u00f3ria e listar e dar manuten\u00e7\u00e3o de forma bem simples os processo do SO.\n\n\nO Nmon, temos as mesmas analises do Htop, mais analise de discos, redes e etc. N\u00e3o \u00e9 possivel eliminar processos!\n\n\nComandos uteis\n\u00b6\n\n\nReiniciar apache\n\u00b6\n\n\nsudo service apache2 restart\n\n\nLimpara memoria cache\n\u00b6\n\n\n\n\nN\u00e3o \u00e9 necess\u00e1rio reiniciar o micro!!!\n\n\n\n\n1\n2\necho\n \n3\n > /proc/sys/vm/drop_caches\nsysctl -w vm.drop_caches\n=\n3\n\n\n\n\n\n\n\nAcompanhar log de erros do apache\n\u00b6\n\n\ntail -f /var/log/apache2/error.log",
            "title": "Python"
        },
        {
            "location": "/servidores/apache/python/#ubuntu-1610-apache2-python-wsgi-oracle",
            "text": "Vamos instalar um servidor ubuntu 16.10 para hospedar p\u00e1ginas web desenvolvidas em python com framework django.   Revisado e testado em 2017-06-28",
            "title": "Ubuntu 16.10 + Apache2 + Python + WSGI + Oracle"
        },
        {
            "location": "/servidores/apache/python/#atulizacao-e-pequenas-correcoes",
            "text": "Antes de come\u00e7ar, vamos resolver o problema de linguagem da vers\u00e3o 16.10  Como  root  1\n2\n3 apt-get install language-pack-pt\nlocale-gen pt_BR.UTF-8\nreboot   Vamos efetuar as atualiza\u00e7\u00f5es  1\n2\n3 apt-get update\napt-get upgrade\napt-get dist-upgrade",
            "title": "Atuliza\u00e7\u00e3o e pequenas corre\u00e7\u00f5es"
        },
        {
            "location": "/servidores/apache/python/#usuarios",
            "text": "Agora criamos o usu\u00e1rio  deploy  1\n2 useradd -m -d /home/deploy -G adm,www-data,sudo -s /bin/bash deploy\npasswd deploy   S\u00f3 para confirmar, verifique em  /etc/passwd  se ficou dessa forma  1 deploy:x:1001:1001::/home/deploy:/bin/bash   Agora edite o arquivo  nano /home/deploy/.profile  e verifique se existe as seguinte informa\u00e7\u00f5es   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20 # ~/.profile: executed by the command interpreter for login shells.  # This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login  # exists.  # see /usr/share/doc/bash/examples/startup-files for examples.  # the files are located in the bash-doc package.  # the default umask is set in /etc/profile; for setting the umask  # for ssh logins, install and configure the libpam-umask package.  #umask 022  # if running bash  if   [  -n  \" $BASH_VERSION \"   ] ;   then       # include .bashrc if it exists       if   [  -f  \" $HOME /.bashrc\"   ] ;   then          .  \" $HOME /.bashrc\"       fi  fi   # set PATH so it includes user's private bin directories  PATH = \" $HOME /bin: $HOME /.local/bin: $PATH \"",
            "title": "Usu\u00e1rios"
        },
        {
            "location": "/servidores/apache/python/#preparando-o-servidor",
            "text": "Troque o usu\u00e1rio  As configura\u00e7\u00f5es abaixo poder\u00e3o ser feitas com usu\u00e1rio  deploy  pois o mesmo foi criado como adminitrador!!!   Efetue as configura\u00e7\u00f5es de rede para adicionar o endere\u00e7o de IP do servidor.  Primeiro, vamos preparar o ambiente de rede. Para isso, vamos determinar o endere\u00e7o de IP no arquivo  /etc/host  1\n2\n3 127.0.0.1       localhost\n127.0.1.1       nome_do_server\n192.168.0.IP    nome_do_server   Agora vamos registrar o dominio de busca para que procure na rede interna, alterando o arquivo  sudo nano /etc/resolvconf/resolv.conf.d/base  1 search domain_name.com   Agora rode o comando para aplicar as resolu\u00e7\u00f5es  sudo resolvconf -u  Vamos reiniciar os servi\u00e7os de rede e efetuar os testes  1\n2\n3\n4 sudo /etc/init.d/networking restart\n\nnslookup nome_do_server\nnslookup nome_do_server.domain_name.com",
            "title": "Preparando o servidor"
        },
        {
            "location": "/servidores/apache/python/#primeiro-o-git",
            "text": "Para instalar o git rode o comando  sudo apt-get install git  Ap\u00f3s isso, vamos efetuar a configura\u00e7\u00e3o das vari\u00e1veis globais  1\n2 git config --global user.name  \"Seu Nome\" \ngit config --global user.email  \"seuemail@domain.com\"    Agora vamos adicionar uma chave publica para poder efetuar intera\u00e7\u00e3o com os projetos  1 ssh-keygen -t rsa -C  \"email@domain\"    Copie a chave ( cat ~/.ssh/id_rsa.pub ) para configura\u00e7\u00e3o de SSH na sua conta no reposit\u00f3rio online",
            "title": "Primeiro o GIT"
        },
        {
            "location": "/servidores/apache/python/#oracle-client",
            "text": "Para instalar o oracle, baixe os arquivos do oracle.com (instant_client linux_x64_x86 .rpm)   Link para download   oracle-instantclient11.2-basic-11.2.0.3.0-1.x86_64.rpm  oracle-instantclient11.2-devel-11.2.0.4.0-1.x86_64.rpm  oracle-instantclient11.2-jdbc-11.2.0.4.0-1.x86_64.rpm  oracle-instantclient11.2-sqlplus-11.2.0.4.0-1.x86_64.rpm    Vamos utilizar o  alien  para efetuar a instala\u00e7\u00e3o ( sudo apt-get install alien )  1\n2\n3\n4\n5\n6 sudo apt-get install alien cd  diretorio_dos_arquivos.rpm\nsudo alien -i oracle-instantclient11.2-basic-11.2.0.3.0-1.x86_64.rpm\nsudo alien -i oracle-instantclient11.2-devel-11.2.0.4.0-1.x86_64.rpm\nsudo alien -i oracle-instantclient11.2-jdbc-11.2.0.4.0-1.x86_64.rpm\nsudo alien -i oracle-instantclient11.2-sqlplus-11.2.0.4.0-1.x86_64.rpm   Agora, vamos editar as variaveis de ambiente para configurar algumas coisas que o client do oracle necessita.  nano ~/.profile  e adicione as seguintes linhas no final do arquivo:  1\n2\n3\n4\n5\n6\n7 ... # ORACLE  export   ORACLE_HOME = /usr/lib/oracle/11.2/client64/ export   LD_LIBRARY_PATH = /usr/lib/oracle/11.2/client64/lib export   PATH = $PATH : $ORACLE_HOME /bin export   TNS_ADMIN = $ORACLE_HOME /network/admin   Agora vamos efetuar as configura\u00e7\u00f5es com o comando  source ~/.profile  Precisamos criar o diret\u00f3rio para os apelidos de rede (TNS_ADMIN).  sudo mkdir -p $TNS_ADMIN  E por ultimo, precisamos criar o arquivo de tns (tnsnames.ora).  sudo touch $TNS_ADMIN/tnsnames.ora  Edite o mesmo e cole os nomes de rede atuais  Antes de rodar o  sqlplus , precisamos instalar a dependencia do  libaio.so  1 sudo apt-get install libaio1 libaio-dev",
            "title": "Oracle Client"
        },
        {
            "location": "/servidores/apache/python/#javascript",
            "text": "Vamos instalar as dependencias para execu\u00e7\u00f5es dos javascripts  Primeiro, vamos instalar o node  1 sudo apt-get install nodejs npm nodejs-legacy   Feito isso, vamos testar instando dois pacotes ess\u00eanciais. 1 sudo npm i -g gulp bower   Verificando se esta tudo certo, rode:  1\n2 bower -v\ngulp -v",
            "title": "JavaScript"
        },
        {
            "location": "/servidores/apache/python/#python-e-virtualenv",
            "text": "Para n\u00e3o termos problemas de vers\u00f5es do sistema operacional, vamos utilizar o pyenv.  Antes de prosseguir a instala\u00e7\u00e3o, precisamos instalar as seguintes depend\u00eancias:  1 sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils   Agora vamos efetuar a instala\u00e7\u00e3o do pyenv   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 sudo apt-get install git python-pip make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev\npip install virtualenvwrapper\n\ngit clone https://github.com/yyuu/pyenv.git ~/.pyenv\ngit clone https://github.com/yyuu/pyenv-virtualenvwrapper.git ~/.pyenv/plugins/pyenv-virtualenvwrapper echo   ''  >> ~/.profile echo   '# PYENV'  >> ~/.profile echo   'export PYENV_ROOT=\"$HOME/.pyenv\"'  >> ~/.profile echo   'export PATH=\"$PYENV_ROOT/bin:$PATH\"'  >> ~/.profile echo   'eval \"$(pyenv init -)\"'  >> ~/.profile echo   'pyenv virtualenvwrapper'  >> ~/.profile echo   'export WORKON_HOME=~/virtualenvs' >> ~/.profile   Atualize o arquivo com o comando  source ~/.profile  e vamos efetuar a instala\u00e7\u00e3o da vers\u00e3o 3.5.2 do python.  1\n2\n3\n4\n5 pyenv install  3 .5.2\n\npyenv versions\n* system  ( set  by /root/.pyenv/version ) \n   3 .5.2   Para ativar a vers\u00e3o 3.5.2, vamos utilizar o comando  pyenv global 3.5.2  Para verificar, utilize:  1\n2 python -V\nPython  3 .5.2",
            "title": "Python e VirtualENV"
        },
        {
            "location": "/servidores/apache/python/#apache",
            "text": "Instalando o apache e configurando o module wsgi",
            "title": "Apache"
        },
        {
            "location": "/servidores/apache/python/#instalacao",
            "text": "1\n2\n3\n4\n5 sudo apt-get install apache2\nsudo apt-get install libapache2-mod-wsgi-py3 cd  /etc/apache2/mods-enabled/\nsudo ln -sf ../mods-available/wsgi.conf\nsudo ln -sf ../mods-available/wsgi.load   Reinicie o apache  sudo /etc/init.d/apache2 restart",
            "title": "Instala\u00e7\u00e3o"
        },
        {
            "location": "/servidores/apache/python/#configuracao",
            "text": "Vamos configurar o o site do projeto (vou usar de exemplo a cota\u00e7\u00e3o web)  Primeiro clonamos o projeto  1\n2 cd  ~/projects\ngit clone git@gitlab.com:wGalleti/webCotacao.git   Agora que temos o caminho completo do projeto,  /home/deploy/projects/webCotacao , vamos criar o virtualenv e configurar o os direcionamentos.  Criando o virtualenv  1\n2\n3\n4\n5\n6 python -m venv .venv source  .venv/bin/activate\npip install --upgrade pip\npip install -r requirements.txt\ncp env_example .env\npython manage.py  test    Se tudo tiver ok, seu projeto est\u00e1 pronto.  Agora vamos configurar o apache para servir essa pasta.  1 sudo nano /etc/apache2/sites-enabled/000-default.conf   Vamos deixar o arquivo da seguinte maneira, para servir os arquivos da api (na porta 8000)   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 <VirtualHost *:8000>\n        Alias /static /home/deploy/projects/webCotacao/static\n        <Directory /home/deploy/projects/webCotacao/static >\n            Require all granted\n        </Directory>\n\n        <Directory /home/deploy/projects/webCotacao/cotacao >\n            <Files wsgi.py>\n                Require all granted\n            </Files>\n        </Directory>\n\n        WSGIDaemonProcess cotacaoweb python-home=/home/deploy/projects/webCotacao/.venv python-path=/home/deploy/projects/webCotacao\n        WSGIPassAuthorization On\n        WSGIProcessGroup cotacaoweb\n        WSGIScriptAlias / /home/deploy/projects/webCotacao/cotacao/wsgi.py\n\n        ErrorLog ${APACHE_LOG_DIR}/error_api.log\n        CustomLog ${APACHE_LOG_DIR}/access_api.log combined\n\n</VirtualHost>   E para servir os arquivos stativos (frontend), ficara da seguinte maneira (na porta 80)   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 <VirtualHost *:80>\n        DocumentRoot /home/deploy/projects/webCotacao/frontend/dist\n\n        <Directory /home/deploy/projects/webCotacao/frontend/dist>\n            Options +Indexes\n            DirectoryIndex index.html\n            Require all granted\n        </Directory>\n\n        ErrorLog ${APACHE_LOG_DIR}/error_site.log\n        CustomLog ${APACHE_LOG_DIR}/access_site.log combined\n\n</VirtualHost>   Agora precisamos ativar a porta 8000 no apache.  Para isso, adicione abaixo do comando  Listen 80  o comando  Listen 8000  no arquivo  /etc/apache2/ports.conf  e reinicie o apache  /etc/init.d/apache2 restart",
            "title": "Configura\u00e7\u00e3o"
        },
        {
            "location": "/servidores/apache/python/#ultimos-ajustes",
            "text": "",
            "title": "Ultimos ajustes"
        },
        {
            "location": "/servidores/apache/python/#permissoes",
            "text": "Edite o arquivo  sudo nano /etc/group  e efetue as sequintes altera\u00e7\u00f5es  Onde estiver  www-data:x:33:  ficara  www-data:x:33:deploy  Onde estiver   deploy:x:1001:  ficara  deploy:x:1001:www-data",
            "title": "Permiss\u00f5es"
        },
        {
            "location": "/servidores/apache/python/#variaveis",
            "text": "Para o apache poder interpretar as libs do  oracle_client  \u00e9 ness\u00e1rio informar no arquivo  /etc/apache2/envvars  as vari\u00e1veis do  oracle  1\n2\n3\n4\n5\n6\n7\n8 # envvars - default environment variables for apache2ctl \n\n... export   ORACLE_HOME = /usr/lib/oracle/11.2/client64/ export   LD_LIBRARY_PATH = /usr/lib/oracle/11.2/client64/lib export   PATH = $PATH : $ORACLE_HOME /bin export   TNS_ADMIN = $ORACLE_HOME /network/admin   Reinicie o apache  sudo /etc/init.d/apache2 restart",
            "title": "Vari\u00e1veis"
        },
        {
            "location": "/servidores/apache/python/#extras",
            "text": "Para facilitar a utiliza\u00e7\u00e3o das ferramentas, vamos implementar as seguintes configura\u00e7\u00f5es no arquivo profile  ~/.profile  1\n2\n3\n4\n5 # Alias  alias   active = 'source .venv/bin/activate'   # ativar vitualenv  alias   deactive = 'source ~/.profile'   # desativar virutalenv  alias   manage = 'python $VIRTUAL_ENV/../manage.py'   # chamar somente manage ao inv\u00e9s de python manage.py  alias   sqlplus = 'rlwrap sqlplus'   # poder utilizar ultimos comandos no sqlplus    Efetuar as seguintes instala\u00e7\u00f5es  sudo apt-get install rlwrap nmon htop",
            "title": "Extras"
        },
        {
            "location": "/servidores/apache/python/#nmon-e-htop",
            "text": "Vamos utilizar essas ferramentas para monitoramento do sistema operacional.  O Htop, podemos analisar desempenho de processador, mem\u00f3ria e listar e dar manuten\u00e7\u00e3o de forma bem simples os processo do SO.  O Nmon, temos as mesmas analises do Htop, mais analise de discos, redes e etc. N\u00e3o \u00e9 possivel eliminar processos!",
            "title": "NMON e HTOP"
        },
        {
            "location": "/servidores/apache/python/#comandos-uteis",
            "text": "",
            "title": "Comandos uteis"
        },
        {
            "location": "/servidores/apache/python/#reiniciar-apache",
            "text": "sudo service apache2 restart",
            "title": "Reiniciar apache"
        },
        {
            "location": "/servidores/apache/python/#limpara-memoria-cache",
            "text": "N\u00e3o \u00e9 necess\u00e1rio reiniciar o micro!!!   1\n2 echo   3  > /proc/sys/vm/drop_caches\nsysctl -w vm.drop_caches = 3",
            "title": "Limpara memoria cache"
        },
        {
            "location": "/servidores/apache/python/#acompanhar-log-de-erros-do-apache",
            "text": "tail -f /var/log/apache2/error.log",
            "title": "Acompanhar log de erros do apache"
        },
        {
            "location": "/oracle/plsql/uteis/",
            "text": "Exportando dados com spool\n\u00b6\n\n\nVamos criar um script sql e um bat para exportar dados de uma determinada consulta para CSV (Grandes Volumes)\n\n\nPrimeiro, vamos preparar a consulta:\n\n\nPreparando a consulta\n\u00b6\n\n\nVou usar o seguinte comando de exemplo:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\nSELECT\n \nA\n.\nCODEMP\n,\n\n       \nA\n.\nCODFIL\n,\n\n       \nA\n.\nNUMOCP\n,\n\n       \nA\n.\nCODPRO\n,\n\n       \nA\n.\nCODFAM\n,\n\n       \nA\n.\nPREFOR\n,\n\n       \nA\n.\nQTDFOR\n,\n\n       \nA\n.\nQTDCAN\n,\n\n       \nA\n.\nQTDABE\n,\n\n       \nA\n.\nQTDREC\n,\n\n       \nA\n.\nQTDPED\n,\n\n       \nA\n.\nVLRFIN\n,\n\n       \nA\n.\nPREUNI\n,\n\n       \nA\n.\nCODMOE\n,\n\n       \nA\n.\nSITIPO\n,\n\n       \nTO_CHAR\n(\nA\n.\nDATENT\n,\n'DD/MM/YYYY'\n)\n \nDATENT\n,\n\n       \nTO_CHAR\n(\nA\n.\nDATGER\n,\n'DD/MM/YYYY'\n)\n \nDATGER\n,\n\n       \nA\n.\nPERDSC\n,\n\n       \nA\n.\nVLRDSC\n,\n\n       \nA\n.\nCODDEP\n,\n\n       \nA\n.\nCODCCU\n,\n\n       \nA\n.\nCODEMP\n,\n\n       \nA\n.\nCODPRO\n,\n\n       \nB\n.\nDESPRO\n,\n\n       \nC\n.\nCODFOR\n\n  \nFROM\n \nSAPIENS\n.\nE420IPO\n \nA\n,\n\n       \nSAPIENS\n.\nE075PRO\n \nB\n,\n\n       \nSAPIENS\n.\nE420OCP\n \nC\n\n\nWHERE\n \nC\n.\nCODEMP\n \n=\n \nA\n.\nCODEMP\n\n  \nAND\n \nC\n.\nCODFIL\n \n=\n \nA\n.\nCODFIL\n\n  \nAND\n \nC\n.\nNUMOCP\n \n=\n \nA\n.\nNUMOCP\n\n  \nAND\n \nB\n.\nCODEMP\n \n=\n \nA\n.\nCODEMP\n\n  \nAND\n \nB\n.\nCODPRO\n \n=\n \nA\n.\nCODPRO\n\n  \nAND\n \nA\n.\nDATGER\n \nBETWEEN\n \n'01/02/2017'\n \nAND\n \n'10/02/2017'\n\n  \nAND\n \nA\n.\nSITIPO\n \nIN\n \n(\n1\n,\n \n2\n,\n \n3\n,\n \n8\n,\n \n9\n)\n\n\n\n\n\n\n\nPrimeiro, precisamos concatenar as colunas, transformandoas em uma \u00fanica coluna\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\nSELECT\n \nA\n.\nCODEMP\n||\n';'\n||\n\n       \nA\n.\nCODFIL\n||\n';'\n||\n\n       \nA\n.\nNUMOCP\n||\n';'\n||\n\n       \nA\n.\nCODPRO\n||\n';'\n||\n\n       \nA\n.\nCODFAM\n||\n';'\n||\n\n       \nA\n.\nPREFOR\n||\n';'\n||\n\n       \nA\n.\nQTDFOR\n||\n';'\n||\n\n       \nA\n.\nQTDCAN\n||\n';'\n||\n\n       \nA\n.\nQTDABE\n||\n';'\n||\n\n       \nA\n.\nQTDREC\n||\n';'\n||\n\n       \nA\n.\nQTDPED\n||\n';'\n||\n\n       \nA\n.\nVLRFIN\n||\n';'\n||\n\n       \nA\n.\nPREUNI\n||\n';'\n||\n\n       \nA\n.\nCODMOE\n||\n';'\n||\n\n       \nA\n.\nSITIPO\n||\n';'\n||\n\n       \nTO_CHAR\n(\nA\n.\nDATENT\n,\n'DD/MM/YYYY'\n)\n||\n';'\n||\n\n       \nTO_CHAR\n(\nA\n.\nDATGER\n,\n'DD/MM/YYYY'\n)\n||\n';'\n||\n\n       \nA\n.\nPERDSC\n||\n';'\n||\n\n       \nA\n.\nVLRDSC\n||\n';'\n||\n\n       \nA\n.\nCODDEP\n||\n';'\n||\n\n       \nA\n.\nCODCCU\n||\n';'\n||\n\n       \nA\n.\nCODEMP\n||\n';'\n||\n\n       \nA\n.\nCODPRO\n||\n';'\n||\n\n       \nB\n.\nDESPRO\n||\n';'\n||\n\n       \nC\n.\nCODFOR\n\n  \nFROM\n \n...\n\n\n\n\n\n\n\nAgora vamos criar uma consulta ficticia para gerar os nomes das colunas\n\n\n1\nSELECT\n \n'CODEMP;CODFIL;NUMOCP;CODPRO;CODFAM;PREFOR;QTDFOR;QTDCAN;QTDABE;QTDREC;QTDPED;VLRFIN;PREUNI;CODMOE;SITIPO;DATENT;DATGER;PERDSC;VLRDSC;CODDEP;CODCCU;CODEMP;CODPRO;DESPRO;CODFOR'\n \nFROM\n \nDUAL\n\n\n\n\n\n\n\nVamos juntar as duas consultas e definir alguns parametros para o SQL em um arquivo com o nome \nconsulta.sql\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\nset\n \ncolsep\n \n';'\n\n\nset\n \necho\n \noff\n\n\nset\n \nfeedback\n \noff\n\n\nset\n \nlinesize\n \n1000\n\n\nset\n \npagesize\n \n0\n\n\nset\n \nsqlprompt\n \n''\n\n\nset\n \ntrimspool\n \non\n\n\nset\n \nheadsep\n \noff\n\n\n\nspool\n \nEXPORT\n.\nCSV\n\n\n\nSELECT\n \n'CODEMP;CODFIL;NUMOCP;CODPRO;CODFAM;PREFOR;QTDFOR;QTDCAN;QTDABE;QTDREC;QTDPED;VLRFIN;PREUNI;CODMOE;SITIPO;DATENT;DATGER;PERDSC;VLRDSC;CODDEP;CODCCU;CODEMP;CODPRO;DESPRO;CODFOR'\n \nFROM\n \nDUAL\n\n\nUNION\n \nALL\n\n\nSELECT\n \nA\n.\nCODEMP\n||\n';'\n||\n\n       \nA\n.\nCODFIL\n||\n';'\n||\n\n       \nA\n.\nNUMOCP\n||\n';'\n||\n\n       \nA\n.\nCODPRO\n||\n';'\n||\n\n       \nA\n.\nCODFAM\n||\n';'\n||\n\n       \nA\n.\nPREFOR\n||\n';'\n||\n\n       \nA\n.\nQTDFOR\n||\n';'\n||\n\n       \nA\n.\nQTDCAN\n||\n';'\n||\n\n       \nA\n.\nQTDABE\n||\n';'\n||\n\n       \nA\n.\nQTDREC\n||\n';'\n||\n\n       \nA\n.\nQTDPED\n||\n';'\n||\n\n       \nA\n.\nVLRFIN\n||\n';'\n||\n\n       \nA\n.\nPREUNI\n||\n';'\n||\n\n       \nA\n.\nCODMOE\n||\n';'\n||\n\n       \nA\n.\nSITIPO\n||\n';'\n||\n\n       \nTO_CHAR\n(\nA\n.\nDATENT\n,\n'DD/MM/YYYY'\n)\n||\n';'\n||\n\n       \nTO_CHAR\n(\nA\n.\nDATGER\n,\n'DD/MM/YYYY'\n)\n||\n';'\n||\n\n       \nA\n.\nPERDSC\n||\n';'\n||\n\n       \nA\n.\nVLRDSC\n||\n';'\n||\n\n       \nA\n.\nCODDEP\n||\n';'\n||\n\n       \nA\n.\nCODCCU\n||\n';'\n||\n\n       \nA\n.\nCODEMP\n||\n';'\n||\n\n       \nA\n.\nCODPRO\n||\n';'\n||\n\n       \nB\n.\nDESPRO\n||\n';'\n||\n\n       \nC\n.\nCODFOR\n\n  \nFROM\n \nSAPIENS\n.\nE420IPO\n \nA\n,\n\n       \nSAPIENS\n.\nE075PRO\n \nB\n,\n\n       \nSAPIENS\n.\nE420OCP\n \nC\n\n\nWHERE\n \nC\n.\nCODEMP\n \n=\n \nA\n.\nCODEMP\n\n  \nAND\n \nC\n.\nCODFIL\n \n=\n \nA\n.\nCODFIL\n\n  \nAND\n \nC\n.\nNUMOCP\n \n=\n \nA\n.\nNUMOCP\n\n  \nAND\n \nB\n.\nCODEMP\n \n=\n \nA\n.\nCODEMP\n\n  \nAND\n \nB\n.\nCODPRO\n \n=\n \nA\n.\nCODPRO\n\n  \nAND\n \nA\n.\nDATGER\n \nBETWEEN\n \n'01/02/2017'\n \nAND\n \n'10/02/2017'\n\n  \nAND\n \nA\n.\nSITIPO\n \nIN\n \n(\n1\n,\n \n2\n,\n \n3\n,\n \n8\n,\n \n9\n);\n\n\n\nspool\n \noff\n\n\nexit\n\n\n\n\n\n\n\nAgora, basta chamar o arquivo para ser executado pelo \nsqlplus\n:\n\n\n1\nsqlplus usuario/senha@tns @consulta\n\n\n\n\n\n\nPara facilitar, crie um arquivo \n.bat\n para executar a a\u00e7\u00e3o.",
            "title": "uteis"
        },
        {
            "location": "/oracle/plsql/uteis/#exportando-dados-com-spool",
            "text": "Vamos criar um script sql e um bat para exportar dados de uma determinada consulta para CSV (Grandes Volumes)  Primeiro, vamos preparar a consulta:",
            "title": "Exportando dados com spool"
        },
        {
            "location": "/oracle/plsql/uteis/#preparando-a-consulta",
            "text": "Vou usar o seguinte comando de exemplo:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35 SELECT   A . CODEMP , \n        A . CODFIL , \n        A . NUMOCP , \n        A . CODPRO , \n        A . CODFAM , \n        A . PREFOR , \n        A . QTDFOR , \n        A . QTDCAN , \n        A . QTDABE , \n        A . QTDREC , \n        A . QTDPED , \n        A . VLRFIN , \n        A . PREUNI , \n        A . CODMOE , \n        A . SITIPO , \n        TO_CHAR ( A . DATENT , 'DD/MM/YYYY' )   DATENT , \n        TO_CHAR ( A . DATGER , 'DD/MM/YYYY' )   DATGER , \n        A . PERDSC , \n        A . VLRDSC , \n        A . CODDEP , \n        A . CODCCU , \n        A . CODEMP , \n        A . CODPRO , \n        B . DESPRO , \n        C . CODFOR \n   FROM   SAPIENS . E420IPO   A , \n        SAPIENS . E075PRO   B , \n        SAPIENS . E420OCP   C  WHERE   C . CODEMP   =   A . CODEMP \n   AND   C . CODFIL   =   A . CODFIL \n   AND   C . NUMOCP   =   A . NUMOCP \n   AND   B . CODEMP   =   A . CODEMP \n   AND   B . CODPRO   =   A . CODPRO \n   AND   A . DATGER   BETWEEN   '01/02/2017'   AND   '10/02/2017' \n   AND   A . SITIPO   IN   ( 1 ,   2 ,   3 ,   8 ,   9 )    Primeiro, precisamos concatenar as colunas, transformandoas em uma \u00fanica coluna   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26 SELECT   A . CODEMP || ';' || \n        A . CODFIL || ';' || \n        A . NUMOCP || ';' || \n        A . CODPRO || ';' || \n        A . CODFAM || ';' || \n        A . PREFOR || ';' || \n        A . QTDFOR || ';' || \n        A . QTDCAN || ';' || \n        A . QTDABE || ';' || \n        A . QTDREC || ';' || \n        A . QTDPED || ';' || \n        A . VLRFIN || ';' || \n        A . PREUNI || ';' || \n        A . CODMOE || ';' || \n        A . SITIPO || ';' || \n        TO_CHAR ( A . DATENT , 'DD/MM/YYYY' ) || ';' || \n        TO_CHAR ( A . DATGER , 'DD/MM/YYYY' ) || ';' || \n        A . PERDSC || ';' || \n        A . VLRDSC || ';' || \n        A . CODDEP || ';' || \n        A . CODCCU || ';' || \n        A . CODEMP || ';' || \n        A . CODPRO || ';' || \n        B . DESPRO || ';' || \n        C . CODFOR \n   FROM   ...    Agora vamos criar uma consulta ficticia para gerar os nomes das colunas  1 SELECT   'CODEMP;CODFIL;NUMOCP;CODPRO;CODFAM;PREFOR;QTDFOR;QTDCAN;QTDABE;QTDREC;QTDPED;VLRFIN;PREUNI;CODMOE;SITIPO;DATENT;DATGER;PERDSC;VLRDSC;CODDEP;CODCCU;CODEMP;CODPRO;DESPRO;CODFOR'   FROM   DUAL    Vamos juntar as duas consultas e definir alguns parametros para o SQL em um arquivo com o nome  consulta.sql   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51 set   colsep   ';'  set   echo   off  set   feedback   off  set   linesize   1000  set   pagesize   0  set   sqlprompt   ''  set   trimspool   on  set   headsep   off  spool   EXPORT . CSV  SELECT   'CODEMP;CODFIL;NUMOCP;CODPRO;CODFAM;PREFOR;QTDFOR;QTDCAN;QTDABE;QTDREC;QTDPED;VLRFIN;PREUNI;CODMOE;SITIPO;DATENT;DATGER;PERDSC;VLRDSC;CODDEP;CODCCU;CODEMP;CODPRO;DESPRO;CODFOR'   FROM   DUAL  UNION   ALL  SELECT   A . CODEMP || ';' || \n        A . CODFIL || ';' || \n        A . NUMOCP || ';' || \n        A . CODPRO || ';' || \n        A . CODFAM || ';' || \n        A . PREFOR || ';' || \n        A . QTDFOR || ';' || \n        A . QTDCAN || ';' || \n        A . QTDABE || ';' || \n        A . QTDREC || ';' || \n        A . QTDPED || ';' || \n        A . VLRFIN || ';' || \n        A . PREUNI || ';' || \n        A . CODMOE || ';' || \n        A . SITIPO || ';' || \n        TO_CHAR ( A . DATENT , 'DD/MM/YYYY' ) || ';' || \n        TO_CHAR ( A . DATGER , 'DD/MM/YYYY' ) || ';' || \n        A . PERDSC || ';' || \n        A . VLRDSC || ';' || \n        A . CODDEP || ';' || \n        A . CODCCU || ';' || \n        A . CODEMP || ';' || \n        A . CODPRO || ';' || \n        B . DESPRO || ';' || \n        C . CODFOR \n   FROM   SAPIENS . E420IPO   A , \n        SAPIENS . E075PRO   B , \n        SAPIENS . E420OCP   C  WHERE   C . CODEMP   =   A . CODEMP \n   AND   C . CODFIL   =   A . CODFIL \n   AND   C . NUMOCP   =   A . NUMOCP \n   AND   B . CODEMP   =   A . CODEMP \n   AND   B . CODPRO   =   A . CODPRO \n   AND   A . DATGER   BETWEEN   '01/02/2017'   AND   '10/02/2017' \n   AND   A . SITIPO   IN   ( 1 ,   2 ,   3 ,   8 ,   9 );  spool   off  exit    Agora, basta chamar o arquivo para ser executado pelo  sqlplus :  1 sqlplus usuario/senha@tns @consulta   Para facilitar, crie um arquivo  .bat  para executar a a\u00e7\u00e3o.",
            "title": "Preparando a consulta"
        },
        {
            "location": "/desenvolvimento/angular/",
            "text": "Dicas de Angular\n\u00b6\n\n\nTradu\u00e7\u00e3o (usando angular-i18n)\n\u00b6\n\n\nnpm install angular-i18n --save\n\n\nEdite o arquivo \napp.module.ts\n\n\n1\n2\n3\n4\n5\n6\n7\nimport\n \n{\n \nLOCALE_ID\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\nproviders\n:\n \n[\n\n    \n...\n\n    \n{\nprovide\n: \nLOCALE_ID\n,\n \nuseValue\n:\n \n'pt-br'\n},\n\n    \n...\n\n\n]\n\n\n\n\n\n\n\nLodash\n\u00b6\n\n\nnpm i -S lodash\n\n\nnpm install @types/lodash --save-dev --save-exact\n\n\n1\n2\n3\nimport\n \n_\n \nfrom\n \n'lodash'\n;\n \n\n\n_\n.\nalgumacoisa\n();",
            "title": "Angular"
        },
        {
            "location": "/desenvolvimento/angular/#dicas-de-angular",
            "text": "",
            "title": "Dicas de Angular"
        },
        {
            "location": "/desenvolvimento/angular/#traducao-usando-angular-i18n",
            "text": "npm install angular-i18n --save  Edite o arquivo  app.module.ts  1\n2\n3\n4\n5\n6\n7 import   {   LOCALE_ID   }   from   '@angular/core' ;  providers :   [ \n     ... \n     { provide :  LOCALE_ID ,   useValue :   'pt-br' }, \n     ...  ]",
            "title": "Tradu\u00e7\u00e3o (usando angular-i18n)"
        },
        {
            "location": "/desenvolvimento/angular/#lodash",
            "text": "npm i -S lodash  npm install @types/lodash --save-dev --save-exact  1\n2\n3 import   _   from   'lodash' ;   _ . algumacoisa ();",
            "title": "Lodash"
        },
        {
            "location": "/desenvolvimento/pythondjango/heroku/",
            "text": "Criando Projeto django e enviando para o HEROKU\n\u00b6\n\n\nVamos criar um projeto simples para ser utilizado com o heroku.\n\n\nPrepara\u00e7\u00e3o do ambiente\n\u00b6\n\n\n\n\nNote\n\n\nUtilizando python 3.6.2\n\n\n\n\n\n\nCrie o diretorio para o projeto e entre no mesmo \nmkdir %nomeprojeto & cd $_\n\n\nCriar o ambiente virtual \npython -m venv .venv\n\n\nAtivar ambiente \nsource .venv/bin/activate\n\n\nInstalar dependencias \npip install django dj-database-url dj-static python-decouple gunicorn psycopg2\n\n\n\n\nDetalhando as depend\u00eancias\n\u00b6\n\n\n\n\ndjango: MAGIC\n\n\ndj-database-url: M\u00f3dulo para converter url em dicionario de conex\u00e3o\n\n\ndj-static: M\u00f3dulo para servir arquivos est\u00e1ticos\n\n\npython-decouple: M\u00f3dulo que ajuda na parte de segura\u00e7a da aplica\u00e7\u00e3o (utilizar parametros via arquivo .env)\n\n\ngunicorn: Servidor web\n\n\npsycopg2: M\u00f3dulo de acesso ao postgres\n\n\n\n\nInicando o projeto\n\u00b6\n\n\nAp\u00f3s o ambiente preparado, vamos iniciar o projeto.\n\nPrimeiro, vamos salvar os m\u00f3dulos que nosso projeto necessita:\n\n\npip freeze > requirements.txt\n\n\nAp\u00f3s isso, vamos criar nosso projeto:\n\n\ndjango-admin startproject %nomeprojeto .\n\n\n\n\nNote\n\n\nUtilizo o ponto para n\u00e3o criar subpasta no projeto!!!\n\n\n\n\nConfigura\u00e7\u00f5es do Projeto:\n\u00b6\n\n\nPrimeiro, vamos ao arquivo \nsettings.py\n. Nele, iremos informar as chaves do projeto, conex\u00e3o de banco de dados, caminhos, etc.\n\n\nPara aumentar a seguran\u00e7a, e remover desse arquivo dados de senha e chave, vamos utilizar o python-decouple.\n\nPara isso vamos criar o arquivo \n.env\n na raiz do projeto.\n\n\nNele vamos informar os seguintes itens:\n\n\n1\n2\nSECRET_KEY=***********************************(Copiar do seu settings.py)\nDEBUG=True\n\n\n\n\n\n\nAgora dentro do nosso \nsetting.py\n, vamos efetuar os imports do decouple e dj-database-url, logo ap\u00f3s o \nimport os\n:\n\n\n1\n2\nfrom\n \ndecouple\n \nimport\n \nconfig\n\n\nfrom\n \ndj_database_url\n \nimport\n \nparse\n \nas\n \ndburl\n\n\n\n\n\n\n\nAgora vamos configurar nosso \nSECRET_KEY\n e \nDEBUG\n para buscar as informa\u00e7\u00f5es do arquivo \n.env\n\n\n1\n2\n3\n4\n5\n# SECURITY WARNING: keep the secret key used in production secret!\n\n\nSECRET_KEY\n \n=\n \nconfig\n(\n'SECRET_KEY'\n)\n\n\n\n# SECURITY WARNING: don't run with debug turned on in production!\n\n\nDEBUG\n \n=\n \nconfig\n(\n'DEBUG'\n,\n \ndefault\n=\nFalse\n,\n \ncast\n=\nbool\n)\n\n\n\n\n\n\n\nEm desenvolvimento, vamos usar o \nsqlite\n, ent\u00e3o para configur\u00e1-lo, vamos criar uma vari\u00e1vel, passando o valor padr\u00e3o para caso n\u00e3o houver informa\u00e7\u00f5es de conex\u00e3o no arquivo \n.env\n\n\n1\n2\n3\n4\n# Database\n\n\n# https://docs.djangoproject.com/en/1.10/ref/settings/#databases\n\n\n\ndefault_db_url\n \n=\n \n'sqlite:///'\n \n+\n \nos\n.\npath\n.\njoin\n(\nBASE_DIR\n,\n \n'db.sqlite3'\n)\n\n\n\n\n\n\n\nA nossa string de conex\u00e3o, ir\u00e1 ficar dessa forma:\n\n\n1\n2\n3\nDATABASES\n \n=\n \n{\n\n    \n'default'\n:\n \nconfig\n(\n'DATABASE_URL'\n,\n \ndefault\n=\ndefault_db_url\n,\n \ncast\n=\ndburl\n)\n\n\n}\n\n\n\n\n\n\n\nAgora vamos efetuar algumas outras configura\u00e7\u00f5es importantes como hosts permitidos para acessar, linguagem, timezone, local dos arquivos staticos e etc.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# hosts\n\n\nALLOWED_HOSTS\n \n=\n \n[\n\n    \n'*'\n\n\n]\n\n\n# tradu\u00e7\u00e3o\n\n\nLANGUAGE_CODE\n \n=\n \n'pt-br'\n\n\n# timestamp\n\n\nTIME_ZONE\n \n=\n \n'America/Cuiaba'\n\n\n\n\n\n\n\n\u00c9 importante tamb\u00e9m configurar onde ficar\u00e3o os arquivos est\u00e1tico\n\n\n1\n2\n3\n4\n5\n# Static files (CSS, JavaScript, Images)\n\n\n# https://docs.djangoproject.com/en/1.11/howto/static-files/\n\n\n\nSTATIC_URL\n \n=\n \n'/static/'\n\n\nSTATIC_ROOT\n \n=\n \nos\n.\npath\n.\njoin\n(\nBASE_DIR\n,\n \n'staticfiles'\n)\n\n\n\n\n\n\n\nSe tudo estiver correto, podemos rodar as migra\u00e7\u00f5es e iniciar nosso projeto \npython manage.py migrate\n e \npython manage.py runserver 0.0.0.0:8000\n\n\n\n\nNote\n\n\nSe estiver no Unix, podemos criar um alias para facilitar a vida \nalias manage='python $VIRTUAL_ENV/../manage.py'\n e usar o comando \nmanage migrate\n e \nmanage runserver\n\nNo windows, crie um arquivo manage.bat em .venv\\scritps com o seguinte conte\u00fado \n@python \"%VIRTUAL_ENV%\\..\\manage.py\" %*\n \n\n\n\n\nConfigura\u00e7\u00f5es do Heroku:\n\u00b6\n\n\nFeito isso, vamos adicionar algumas estruturas do HEROKU:\n\n\nPara isso, vamos precisar criar o app no heroku, criar os arquivos Procfile, runtime.txt.\n\n\nPrimeiro, precisamos informar quem vai servir os arquivos staticos no heroku, por isso utilizamos o m\u00f3dulo \ndj-static\n. Para isso, abra o arquivo \nwsgi.py\n:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nimport\n \nos\n\n\nfrom\n \ndj_static\n \nimport\n \nCling\n\n\n\nfrom\n \ndjango.core.wsgi\n \nimport\n \nget_wsgi_application\n\n\n\nos\n.\nenviron\n.\nsetdefault\n(\n\"DJANGO_SETTINGS_MODULE\"\n,\n \n\"atividades.settings\"\n)\n\n\n\napplication\n \n=\n \nCling\n(\nget_wsgi_application\n())\n\n\n\n\n\n\n\nAgora, vamos criar o arquivo \nProcfile\n, que informa ao heroku como que as coisas v\u00e3o acontecer:\n\n\n1\nweb: gunicorn %nomeprojeto.wsgi --log-file -\n\n\n\n\n\n\nAgora, camos criar o arquivo \nruntime.txt\n, que informa qual vers\u00e3o do python vamos utilizar:\n\n\n1\npython-3.6.2\n\n\n\n\n\n\nFeito isso, vamos preparar o git.\n\n\nPrimeiro, iniciamos o reposit\u00f3rio com o comando \ngit init\n e depois vamos criar o arquivo \n.gitignore\n, para n\u00e3o enviarmos alguns arquivos.\n\n\n1\n2\n3\n4\n5\n6\n7\n.DS_Store\n.env\n.idea\n.venv\n*.sqlite3\n*pyc\n__pycache__\n\n\n\n\n\n\nFeito isso, vamos comitar os arquivos. Primeiro enviamos o .gitignore\n\n\n1\n2\ngit add .gitignore\ngit commit -m \"Add ignore config\"\n\n\n\n\n\n\nAgora, vamos importar o restante dos arquivos\n\n\n1\n2\ngit add .\ngit commit -m \"Import project\"\n\n\n\n\n\n\nCriando projeto no Heroku\n\u00b6\n\n\nAgora, vamos ao Heroku.\n\n\nNessa etapa, precisamos criar o app, configurar as variaveis, e enviar os arquivos.\n\n\nAntes de come\u00e7ar, instale o heroku client para utilizar os comandos.\n\n\n\n\nNote\n\n\nCaso tenha duvidas, siga \nhttps://devcenter.heroku.com/articles/heroku-cli\n\n\n\n\nVamos criar e configurar o app:\n\n\n1\n2\n3\n4\n5\nheroku create %nomeprojeto --buildpack heroku/python\nheroku addons:create heroku-postgresql:hobby-dev\nheroku pg:promote\nheroku plugins:install heroku-config\nheroku config:push\n\n\n\n\n\n\nFeito isso, vamos enviar o projeto\n\n\n1\ngit push heroku master\n\n\n\n\n\n\nCaso, tudo correto, projeto no ar!!!\n\n\nConclus\u00e3o\n\u00b6\n\n\nPara finalizar, precisamos rodar as migra\u00e7\u00f5es e criar o usuario admin:\n\n\n1\n2\nheroku run python manage.py migrate\nheroku run python manage.py createsuperuser\n\n\n\n\n\n\nAgradecimento\n\u00b6\n\n\nFeito isso, s\u00f3 utilizar eu app e desfrutar das funcionalidades do heroku! Valeu!\n\n\nAgradecimentos especiais:\n\n\n\n\nHenrique Bastos (\nhttps://welcometothedjango.com.br/\n)\n\n\nAlessandro Folk\n\n\nDoc do Heroku\n\n\nDoc do Django",
            "title": "Projeto Heroku"
        },
        {
            "location": "/desenvolvimento/pythondjango/heroku/#criando-projeto-django-e-enviando-para-o-heroku",
            "text": "Vamos criar um projeto simples para ser utilizado com o heroku.",
            "title": "Criando Projeto django e enviando para o HEROKU"
        },
        {
            "location": "/desenvolvimento/pythondjango/heroku/#preparacao-do-ambiente",
            "text": "Note  Utilizando python 3.6.2    Crie o diretorio para o projeto e entre no mesmo  mkdir %nomeprojeto & cd $_  Criar o ambiente virtual  python -m venv .venv  Ativar ambiente  source .venv/bin/activate  Instalar dependencias  pip install django dj-database-url dj-static python-decouple gunicorn psycopg2",
            "title": "Prepara\u00e7\u00e3o do ambiente"
        },
        {
            "location": "/desenvolvimento/pythondjango/heroku/#detalhando-as-dependencias",
            "text": "django: MAGIC  dj-database-url: M\u00f3dulo para converter url em dicionario de conex\u00e3o  dj-static: M\u00f3dulo para servir arquivos est\u00e1ticos  python-decouple: M\u00f3dulo que ajuda na parte de segura\u00e7a da aplica\u00e7\u00e3o (utilizar parametros via arquivo .env)  gunicorn: Servidor web  psycopg2: M\u00f3dulo de acesso ao postgres",
            "title": "Detalhando as depend\u00eancias"
        },
        {
            "location": "/desenvolvimento/pythondjango/heroku/#inicando-o-projeto",
            "text": "Ap\u00f3s o ambiente preparado, vamos iniciar o projeto. \nPrimeiro, vamos salvar os m\u00f3dulos que nosso projeto necessita:  pip freeze > requirements.txt  Ap\u00f3s isso, vamos criar nosso projeto:  django-admin startproject %nomeprojeto .   Note  Utilizo o ponto para n\u00e3o criar subpasta no projeto!!!",
            "title": "Inicando o projeto"
        },
        {
            "location": "/desenvolvimento/pythondjango/heroku/#configuracoes-do-projeto",
            "text": "Primeiro, vamos ao arquivo  settings.py . Nele, iremos informar as chaves do projeto, conex\u00e3o de banco de dados, caminhos, etc.  Para aumentar a seguran\u00e7a, e remover desse arquivo dados de senha e chave, vamos utilizar o python-decouple. \nPara isso vamos criar o arquivo  .env  na raiz do projeto.  Nele vamos informar os seguintes itens:  1\n2 SECRET_KEY=***********************************(Copiar do seu settings.py)\nDEBUG=True   Agora dentro do nosso  setting.py , vamos efetuar os imports do decouple e dj-database-url, logo ap\u00f3s o  import os :  1\n2 from   decouple   import   config  from   dj_database_url   import   parse   as   dburl    Agora vamos configurar nosso  SECRET_KEY  e  DEBUG  para buscar as informa\u00e7\u00f5es do arquivo  .env  1\n2\n3\n4\n5 # SECURITY WARNING: keep the secret key used in production secret!  SECRET_KEY   =   config ( 'SECRET_KEY' )  # SECURITY WARNING: don't run with debug turned on in production!  DEBUG   =   config ( 'DEBUG' ,   default = False ,   cast = bool )    Em desenvolvimento, vamos usar o  sqlite , ent\u00e3o para configur\u00e1-lo, vamos criar uma vari\u00e1vel, passando o valor padr\u00e3o para caso n\u00e3o houver informa\u00e7\u00f5es de conex\u00e3o no arquivo  .env  1\n2\n3\n4 # Database  # https://docs.djangoproject.com/en/1.10/ref/settings/#databases  default_db_url   =   'sqlite:///'   +   os . path . join ( BASE_DIR ,   'db.sqlite3' )    A nossa string de conex\u00e3o, ir\u00e1 ficar dessa forma:  1\n2\n3 DATABASES   =   { \n     'default' :   config ( 'DATABASE_URL' ,   default = default_db_url ,   cast = dburl )  }    Agora vamos efetuar algumas outras configura\u00e7\u00f5es importantes como hosts permitidos para acessar, linguagem, timezone, local dos arquivos staticos e etc.  1\n2\n3\n4\n5\n6\n7\n8 # hosts  ALLOWED_HOSTS   =   [ \n     '*'  ]  # tradu\u00e7\u00e3o  LANGUAGE_CODE   =   'pt-br'  # timestamp  TIME_ZONE   =   'America/Cuiaba'    \u00c9 importante tamb\u00e9m configurar onde ficar\u00e3o os arquivos est\u00e1tico  1\n2\n3\n4\n5 # Static files (CSS, JavaScript, Images)  # https://docs.djangoproject.com/en/1.11/howto/static-files/  STATIC_URL   =   '/static/'  STATIC_ROOT   =   os . path . join ( BASE_DIR ,   'staticfiles' )    Se tudo estiver correto, podemos rodar as migra\u00e7\u00f5es e iniciar nosso projeto  python manage.py migrate  e  python manage.py runserver 0.0.0.0:8000   Note  Se estiver no Unix, podemos criar um alias para facilitar a vida  alias manage='python $VIRTUAL_ENV/../manage.py'  e usar o comando  manage migrate  e  manage runserver \nNo windows, crie um arquivo manage.bat em .venv\\scritps com o seguinte conte\u00fado  @python \"%VIRTUAL_ENV%\\..\\manage.py\" %*",
            "title": "Configura\u00e7\u00f5es do Projeto:"
        },
        {
            "location": "/desenvolvimento/pythondjango/heroku/#configuracoes-do-heroku",
            "text": "Feito isso, vamos adicionar algumas estruturas do HEROKU:  Para isso, vamos precisar criar o app no heroku, criar os arquivos Procfile, runtime.txt.  Primeiro, precisamos informar quem vai servir os arquivos staticos no heroku, por isso utilizamos o m\u00f3dulo  dj-static . Para isso, abra o arquivo  wsgi.py :  1\n2\n3\n4\n5\n6\n7\n8 import   os  from   dj_static   import   Cling  from   django.core.wsgi   import   get_wsgi_application  os . environ . setdefault ( \"DJANGO_SETTINGS_MODULE\" ,   \"atividades.settings\" )  application   =   Cling ( get_wsgi_application ())    Agora, vamos criar o arquivo  Procfile , que informa ao heroku como que as coisas v\u00e3o acontecer:  1 web: gunicorn %nomeprojeto.wsgi --log-file -   Agora, camos criar o arquivo  runtime.txt , que informa qual vers\u00e3o do python vamos utilizar:  1 python-3.6.2   Feito isso, vamos preparar o git.  Primeiro, iniciamos o reposit\u00f3rio com o comando  git init  e depois vamos criar o arquivo  .gitignore , para n\u00e3o enviarmos alguns arquivos.  1\n2\n3\n4\n5\n6\n7 .DS_Store\n.env\n.idea\n.venv\n*.sqlite3\n*pyc\n__pycache__   Feito isso, vamos comitar os arquivos. Primeiro enviamos o .gitignore  1\n2 git add .gitignore\ngit commit -m \"Add ignore config\"   Agora, vamos importar o restante dos arquivos  1\n2 git add .\ngit commit -m \"Import project\"",
            "title": "Configura\u00e7\u00f5es do Heroku:"
        },
        {
            "location": "/desenvolvimento/pythondjango/heroku/#criando-projeto-no-heroku",
            "text": "Agora, vamos ao Heroku.  Nessa etapa, precisamos criar o app, configurar as variaveis, e enviar os arquivos.  Antes de come\u00e7ar, instale o heroku client para utilizar os comandos.   Note  Caso tenha duvidas, siga  https://devcenter.heroku.com/articles/heroku-cli   Vamos criar e configurar o app:  1\n2\n3\n4\n5 heroku create %nomeprojeto --buildpack heroku/python\nheroku addons:create heroku-postgresql:hobby-dev\nheroku pg:promote\nheroku plugins:install heroku-config\nheroku config:push   Feito isso, vamos enviar o projeto  1 git push heroku master   Caso, tudo correto, projeto no ar!!!",
            "title": "Criando projeto no Heroku"
        },
        {
            "location": "/desenvolvimento/pythondjango/heroku/#conclusao",
            "text": "Para finalizar, precisamos rodar as migra\u00e7\u00f5es e criar o usuario admin:  1\n2 heroku run python manage.py migrate\nheroku run python manage.py createsuperuser",
            "title": "Conclus\u00e3o"
        },
        {
            "location": "/desenvolvimento/pythondjango/heroku/#agradecimento",
            "text": "Feito isso, s\u00f3 utilizar eu app e desfrutar das funcionalidades do heroku! Valeu!  Agradecimentos especiais:   Henrique Bastos ( https://welcometothedjango.com.br/ )  Alessandro Folk  Doc do Heroku  Doc do Django",
            "title": "Agradecimento"
        },
        {
            "location": "/desenvolvimento/pythondjango/rest_framework/",
            "text": "Usando Django Rest Framework\n\u00b6\n\n\n\n\nNote\n\n\nUsando python 3.5.2\n\n\n\n\nInstala\u00e7\u00e3o\n\u00b6\n\n\nCom seu projeto funcionando, vamos instalar os pacotes\n\n\npip install django-rest-auth djangorestframework django-filter\n\n\nDetalhando as depend\u00eancias\n\u00b6\n\n\n\n\ndjango-cors-headers\n: M\u00f3dulo para permitir acesso via cors (cross domain origin)\n\n\ndjango-filter\n: M\u00f3dulo para utilizar filtros no django\n\n\ndjango-rest-auth\n: M\u00f3dulo para autentica\u00e7\u00e3o via REST\n\n\ndjangorestframework\n: M\u00f3dulo para desenvolver apis REST\n\n\n\n\nConfigurando o projeto\n\u00b6\n\n\nVamos adicionar o \n'rest_framework'\n, \n'rest_framework.authtoken'\n, \n'rest_auth'\n ao \nINSTALLED_APPS\n, e criamos o a seguinte variavel no \nsettings.py\n\n\nAgora, vamos definir algumas configura\u00e7\u00f5es padr\u00f5es, como autentica\u00e7\u00e3o, parser de class, formata\u00e7\u00e3o e pagina\u00e7\u00e3o\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\nREST_FRAMEWORK\n \n=\n \n{\n\n    \n'DEFAULT_FILTER_BACKENDS'\n:\n \n(\n\n        \n'django_filters.rest_framework.DjangoFilterBackend'\n,\n\n    \n),\n\n    \n'DEFAULT_AUTHENTICATION_CLASSES'\n:\n \n(\n\n        \n'rest_framework.authentication.TokenAuthentication'\n,\n\n    \n),\n\n    \n'DEFAULT_PARSER_CLASSES'\n:\n \n(\n\n        \n'rest_framework.parsers.JSONParser'\n,\n\n    \n),\n\n    \n'COERCE_DECIMAL_TO_STRING'\n:\n \nFalse\n,\n\n    \n'DEFAULT_PAGINATION_CLASS'\n:\n \n'rest_framework.pagination.LimitOffsetPagination'\n,\n\n\n}\n\n\n\n\n\n\n\nCorsHeaders\n\u00b6\n\n\nComo vamos transformar nosso projeto em uma API RestFull, precisamos configurar as permiss\u00f5es de CORS (\ncross domain origins\n) e para isso vamos utilizar a biblioteca \ncors-headers\n\n\nPrimeiro, vamos instalar o m\u00f3dulo \npip install django-cors-headers\n\n\nAdicionando o \n'corsheaders'\n ao \nINSTALLED_APPS\n, e criamos o a seguinte variavel\n\n\n1\n2\n# Cors Headers\n\n\nCORS_ORIGIN_ALLOW_ALL\n \n=\n \nTrue\n\n\n\n\n\n\n\n\n\nNote\n\n\nOu voc\u00ea pode configurar os hosts que deseja permitir a conex\u00e3o. \nVeja a Documenta\u00e7\u00e3o oficial\n\n\n\n\nEm \nMIDDLEWARE\n, antes de \n'django.middleware.common.CommonMiddleware'\n, adicione \n'corsheaders.middleware.CorsMiddleware',\n\n\nFeito isso, s\u00f3 utilizar as facilidades do \ndjango-rest-framework\n\n\nExemplo de uso\n\u00b6\n\n\nVamos criar um exemplo de api para um crud da tabela de \npessoa\n\n\nNesse exemplo, vamos usar o cliente para consumir o restfull o \npostman\n\n\nModelo\n\u00b6\n\n\nVamos criar a classe \npessoa\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\nclass\n \nPessoa\n(\nmodels\n.\nModel\n):\n\n    \n\"\"\"Modelo de Pessoas\"\"\"\n\n\n    \nnome\n \n=\n \nmodels\n.\nCharField\n(\nmax_length\n=\n50\n)\n\n    \nemail\n \n=\n \nmodels\n.\nEmailField\n(\nunique\n=\nTrue\n)\n\n    \ntelefone\n \n=\n \nmodels\n.\nCharField\n(\nmax_length\n=\n15\n)\n\n    \ntem_whats\n \n=\n \nmodels\n.\nBooleanField\n(\ndefault\n=\nFalse\n)\n\n\n    \ndef\n \n__str__\n(\nself\n):\n\n        \nreturn\n \nself\n.\nnome\n\n\n    \nclass\n \nMeta\n:\n\n        \nordering\n \n=\n \n(\n'nome'\n,\n \n'email'\n)\n\n\n\n\n\n\n\nCriamos e aplicamos as migra\u00e7\u00f5es\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n(\n.venv\n)\n wgalleti@mpGalleti api \n(\nmaster\n)\n $ python manage.py makemigrations\nMigrations \nfor\n \n'core'\n:\n  intranet/core/migrations/0002_pessoa.py\n    - Create model Pessoa\n\n\n(\n.venv\n)\n wgalleti@mpGalleti api \n(\nmaster\n)\n $ python manage.py migrate\nOperations to perform:\n  Apply all migrations: core\nRunning migrations:\n  Applying core.0002_pessoa... OK\n\n\n\n\n\n\nSerializer\n\u00b6\n\n\nFeito isso, vamos necessitar de uma classe para serializar esses dados, ent\u00e3o adicionaremos o arquivo \nserializers.py\n no seu \napp\n e nele vamos criar a classe para serializar pessoas\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nfrom\n \nrest_framework\n \nimport\n \nserializers\n\n\n\nfrom\n \nintranet.core.models\n \nimport\n \nPessoa\n\n\n\nclass\n \nPessoaSerializer\n(\nserializers\n.\nModelSerializer\n):\n\n    \n\"\"\"Serializer para modelo de Pessoas\"\"\"\n\n\n    \nclass\n \nMeta\n:\n\n        \nmodel\n \n=\n \nPessoa\n\n        \nfields\n \n=\n \n'__all__'\n\n\n\n\n\n\n\nNessa classe, estamos dizendo que ela herda de \nserializer.ModelSerializer\n, que vamos usar o model \nPessoa\n e vamos utilizar todos os campos\n\n\nView\n\u00b6\n\n\nFeito isso, vamos criar o nosso view set, dentro de \nviews.py\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\nfrom\n \nrest_framework\n \nimport\n \nviewsets\n,\n \npermissions\n,\n \nresponse\n\n\nfrom\n \nrest_framework.filters\n \nimport\n \nDjangoFilterBackend\n\n\n\nfrom\n \nintranet.core.serializers\n \nimport\n \n*\n\n\n\nclass\n \nPessoaViewSet\n(\nviewsets\n.\nModelViewSet\n):\n\n    \n\"\"\"ViewSet para modelo de Pessoa\"\"\"\n\n\n    \nserializer_class\n \n=\n \nPessoaSerializer\n\n    \nqueryset\n \n=\n \nPessoa\n.\nobjects\n.\nall\n()\n\n    \nfilter_backends\n \n=\n \n(\nDjangoFilterBackend\n,)\n\n    \nfilter_fields\n \n=\n \n(\n'nome'\n,\n \n'email'\n)\n\n    \npermission_classes\n \n=\n \n(\npermissions\n.\nDjangoModelPermissions\n,)\n\n\n\n\n\n\n\nNessa classe, estamos dizendo que ela herda de \nviewset.ModelViewSet\n, que vamos utilizar o serializer_class a classe que criamos anteriomente \nPessoaSerializer\n a nossa pesquisa ser\u00e1 atrav\u00e9s o queryset \nPessoa.objects.all()\n.\n\n\nDefinimos que o m\u00e9todo de filtro \u00e9 o \nDjangoFilterBackend\n para podermos interagir com a url. Exemplo: Acessar http://url/api/pessoa/?nome=William\n\n\nDefinimos que os campos que poder\u00e3o ser filtrados s\u00e3o \nnome\n e \nemail\n\n\nE por ultimo, definimos que as permiss\u00f5es seguir\u00e3o as regras das Permiss\u00f5es de Modelo do Django \nDjangoModelPermissions\n\n\nUrl\n\u00b6\n\n\nFeito isso, basta registrar a url para usar!\n\n\nNo nosso \nurl.py\n vamos efetuar as seguinte configura\u00e7\u00f5es\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nfrom\n \ndjango.conf.urls\n \nimport\n \nurl\n,\n \ninclude\n\n\n\nfrom\n \nrest_framework\n \nimport\n \nrouters\n\n\n\nfrom\n \nintranet.core.views\n \nimport\n \n*\n\n\n\nrouter\n \n=\n \nrouters\n.\nDefaultRouter\n(\ntrailing_slash\n=\nTrue\n)\n\n\nrouter\n.\nregister\n(\nr\n'pessoa'\n,\n \nPessoaViewSet\n)\n\n\n\nurlpatterns\n \n=\n \n[\n\n    \nurl\n(\nr\n'^api/'\n,\n \ninclude\n(\nrouter\n.\nurls\n)),\n\n\n]\n\n\n\n\n\n\n\nPrimeiro, criamos uma variavel \nrouter\n recebendo informa\u00e7\u00f5es de \nrouters.DefaultRouter\n. Ali definimos \ntrailing_slash=True\n para utiliza\u00e7\u00e3o em frameworks como \nangularjs\n, \nvue\n para que os mesmos for\u00e7em a preencher a \n/\n no final do metodo\n\n\nAp\u00f3s isso, registramos na url \npessoa\n o nosso viewSet\n\n\nAgora em nossas rotas mesmo, adicionamos as rotas que nosso \nrouter\n ir\u00e1 gerar!\n\n\nAcessando\n\u00b6\n\n\nPara testar tudo, vamos rodar nosso servidor \npython manage.py runserver\n e verificar a url \nhttp://localhost:8000/core/api\n\n\nSe aparecer a seguinte tela, \u00e9 porque est\u00e1 tudo funcionando\n\n\n\n\n\n\nNote\n\n\nDessa forma, voc\u00ea tera acesso aos metodos GET, POST, PUT, DELETE para manipular os arquivos\n\n\n\n\nValeu!",
            "title": "Rest Framework"
        },
        {
            "location": "/desenvolvimento/pythondjango/rest_framework/#usando-django-rest-framework",
            "text": "Note  Usando python 3.5.2",
            "title": "Usando Django Rest Framework"
        },
        {
            "location": "/desenvolvimento/pythondjango/rest_framework/#instalacao",
            "text": "Com seu projeto funcionando, vamos instalar os pacotes  pip install django-rest-auth djangorestframework django-filter",
            "title": "Instala\u00e7\u00e3o"
        },
        {
            "location": "/desenvolvimento/pythondjango/rest_framework/#detalhando-as-dependencias",
            "text": "django-cors-headers : M\u00f3dulo para permitir acesso via cors (cross domain origin)  django-filter : M\u00f3dulo para utilizar filtros no django  django-rest-auth : M\u00f3dulo para autentica\u00e7\u00e3o via REST  djangorestframework : M\u00f3dulo para desenvolver apis REST",
            "title": "Detalhando as depend\u00eancias"
        },
        {
            "location": "/desenvolvimento/pythondjango/rest_framework/#configurando-o-projeto",
            "text": "Vamos adicionar o  'rest_framework' ,  'rest_framework.authtoken' ,  'rest_auth'  ao  INSTALLED_APPS , e criamos o a seguinte variavel no  settings.py  Agora, vamos definir algumas configura\u00e7\u00f5es padr\u00f5es, como autentica\u00e7\u00e3o, parser de class, formata\u00e7\u00e3o e pagina\u00e7\u00e3o   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 REST_FRAMEWORK   =   { \n     'DEFAULT_FILTER_BACKENDS' :   ( \n         'django_filters.rest_framework.DjangoFilterBackend' , \n     ), \n     'DEFAULT_AUTHENTICATION_CLASSES' :   ( \n         'rest_framework.authentication.TokenAuthentication' , \n     ), \n     'DEFAULT_PARSER_CLASSES' :   ( \n         'rest_framework.parsers.JSONParser' , \n     ), \n     'COERCE_DECIMAL_TO_STRING' :   False , \n     'DEFAULT_PAGINATION_CLASS' :   'rest_framework.pagination.LimitOffsetPagination' ,  }",
            "title": "Configurando o projeto"
        },
        {
            "location": "/desenvolvimento/pythondjango/rest_framework/#corsheaders",
            "text": "Como vamos transformar nosso projeto em uma API RestFull, precisamos configurar as permiss\u00f5es de CORS ( cross domain origins ) e para isso vamos utilizar a biblioteca  cors-headers  Primeiro, vamos instalar o m\u00f3dulo  pip install django-cors-headers  Adicionando o  'corsheaders'  ao  INSTALLED_APPS , e criamos o a seguinte variavel  1\n2 # Cors Headers  CORS_ORIGIN_ALLOW_ALL   =   True     Note  Ou voc\u00ea pode configurar os hosts que deseja permitir a conex\u00e3o.  Veja a Documenta\u00e7\u00e3o oficial   Em  MIDDLEWARE , antes de  'django.middleware.common.CommonMiddleware' , adicione  'corsheaders.middleware.CorsMiddleware',  Feito isso, s\u00f3 utilizar as facilidades do  django-rest-framework",
            "title": "CorsHeaders"
        },
        {
            "location": "/desenvolvimento/pythondjango/rest_framework/#exemplo-de-uso",
            "text": "Vamos criar um exemplo de api para um crud da tabela de  pessoa  Nesse exemplo, vamos usar o cliente para consumir o restfull o  postman",
            "title": "Exemplo de uso"
        },
        {
            "location": "/desenvolvimento/pythondjango/rest_framework/#modelo",
            "text": "Vamos criar a classe  pessoa   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 class   Pessoa ( models . Model ): \n     \"\"\"Modelo de Pessoas\"\"\" \n\n     nome   =   models . CharField ( max_length = 50 ) \n     email   =   models . EmailField ( unique = True ) \n     telefone   =   models . CharField ( max_length = 15 ) \n     tem_whats   =   models . BooleanField ( default = False ) \n\n     def   __str__ ( self ): \n         return   self . nome \n\n     class   Meta : \n         ordering   =   ( 'nome' ,   'email' )    Criamos e aplicamos as migra\u00e7\u00f5es   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 ( .venv )  wgalleti@mpGalleti api  ( master )  $ python manage.py makemigrations\nMigrations  for   'core' :\n  intranet/core/migrations/0002_pessoa.py\n    - Create model Pessoa ( .venv )  wgalleti@mpGalleti api  ( master )  $ python manage.py migrate\nOperations to perform:\n  Apply all migrations: core\nRunning migrations:\n  Applying core.0002_pessoa... OK",
            "title": "Modelo"
        },
        {
            "location": "/desenvolvimento/pythondjango/rest_framework/#serializer",
            "text": "Feito isso, vamos necessitar de uma classe para serializar esses dados, ent\u00e3o adicionaremos o arquivo  serializers.py  no seu  app  e nele vamos criar a classe para serializar pessoas   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 from   rest_framework   import   serializers  from   intranet.core.models   import   Pessoa  class   PessoaSerializer ( serializers . ModelSerializer ): \n     \"\"\"Serializer para modelo de Pessoas\"\"\" \n\n     class   Meta : \n         model   =   Pessoa \n         fields   =   '__all__'    Nessa classe, estamos dizendo que ela herda de  serializer.ModelSerializer , que vamos usar o model  Pessoa  e vamos utilizar todos os campos",
            "title": "Serializer"
        },
        {
            "location": "/desenvolvimento/pythondjango/rest_framework/#view",
            "text": "Feito isso, vamos criar o nosso view set, dentro de  views.py   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 from   rest_framework   import   viewsets ,   permissions ,   response  from   rest_framework.filters   import   DjangoFilterBackend  from   intranet.core.serializers   import   *  class   PessoaViewSet ( viewsets . ModelViewSet ): \n     \"\"\"ViewSet para modelo de Pessoa\"\"\" \n\n     serializer_class   =   PessoaSerializer \n     queryset   =   Pessoa . objects . all () \n     filter_backends   =   ( DjangoFilterBackend ,) \n     filter_fields   =   ( 'nome' ,   'email' ) \n     permission_classes   =   ( permissions . DjangoModelPermissions ,)    Nessa classe, estamos dizendo que ela herda de  viewset.ModelViewSet , que vamos utilizar o serializer_class a classe que criamos anteriomente  PessoaSerializer  a nossa pesquisa ser\u00e1 atrav\u00e9s o queryset  Pessoa.objects.all() .  Definimos que o m\u00e9todo de filtro \u00e9 o  DjangoFilterBackend  para podermos interagir com a url. Exemplo: Acessar http://url/api/pessoa/?nome=William  Definimos que os campos que poder\u00e3o ser filtrados s\u00e3o  nome  e  email  E por ultimo, definimos que as permiss\u00f5es seguir\u00e3o as regras das Permiss\u00f5es de Modelo do Django  DjangoModelPermissions",
            "title": "View"
        },
        {
            "location": "/desenvolvimento/pythondjango/rest_framework/#url",
            "text": "Feito isso, basta registrar a url para usar!  No nosso  url.py  vamos efetuar as seguinte configura\u00e7\u00f5es   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 from   django.conf.urls   import   url ,   include  from   rest_framework   import   routers  from   intranet.core.views   import   *  router   =   routers . DefaultRouter ( trailing_slash = True )  router . register ( r 'pessoa' ,   PessoaViewSet )  urlpatterns   =   [ \n     url ( r '^api/' ,   include ( router . urls )),  ]    Primeiro, criamos uma variavel  router  recebendo informa\u00e7\u00f5es de  routers.DefaultRouter . Ali definimos  trailing_slash=True  para utiliza\u00e7\u00e3o em frameworks como  angularjs ,  vue  para que os mesmos for\u00e7em a preencher a  /  no final do metodo  Ap\u00f3s isso, registramos na url  pessoa  o nosso viewSet  Agora em nossas rotas mesmo, adicionamos as rotas que nosso  router  ir\u00e1 gerar!",
            "title": "Url"
        },
        {
            "location": "/desenvolvimento/pythondjango/rest_framework/#acessando",
            "text": "Para testar tudo, vamos rodar nosso servidor  python manage.py runserver  e verificar a url  http://localhost:8000/core/api  Se aparecer a seguinte tela, \u00e9 porque est\u00e1 tudo funcionando    Note  Dessa forma, voc\u00ea tera acesso aos metodos GET, POST, PUT, DELETE para manipular os arquivos   Valeu!",
            "title": "Acessando"
        },
        {
            "location": "/desenvolvimento/pythondjango/queries/",
            "text": "Django Queries\n\u00b6\n\n\nO que aprendi fazendo queries no Django?\n\n\nFiltros\n\u00b6\n\n\n\n\n\n\n\n\nExpress\u00e3o\n\n\nResultado\n\n\n\n\n\n\n\n\n\n\na__exact=value\n\n\nCombina\u00e7\u00e3o exata\n\n\n\n\n\n\na__exact=None\n\n\nIS NULL\n\n\n\n\n\n\nx__iexact=value\n\n\nCombina\u00e7\u00e3o string ignorando mai\u00fascula e min\u00fascula\n\n\n\n\n\n\na__isnull=True\n\n\nIS NULL\n\n\n\n\n\n\na__isnull=False\n\n\nIS NOT NULL\n\n\n\n\n\n\na__contains=value\n\n\nCont\u00e9m na string\n\n\n\n\n\n\na__icontains=value\n\n\nCont\u00e9m na string ignorando mai\u00fascula e min\u00fascula\n\n\n\n\n\n\na__contains=value\n\n\nCombina\u00e7\u00e3o exata\n\n\n\n\n\n\na__exact=value\n\n\nCombina\u00e7\u00e3o exata",
            "title": "Queries"
        },
        {
            "location": "/desenvolvimento/pythondjango/queries/#django-queries",
            "text": "O que aprendi fazendo queries no Django?",
            "title": "Django Queries"
        },
        {
            "location": "/desenvolvimento/pythondjango/queries/#filtros",
            "text": "Express\u00e3o  Resultado      a__exact=value  Combina\u00e7\u00e3o exata    a__exact=None  IS NULL    x__iexact=value  Combina\u00e7\u00e3o string ignorando mai\u00fascula e min\u00fascula    a__isnull=True  IS NULL    a__isnull=False  IS NOT NULL    a__contains=value  Cont\u00e9m na string    a__icontains=value  Cont\u00e9m na string ignorando mai\u00fascula e min\u00fascula    a__contains=value  Combina\u00e7\u00e3o exata    a__exact=value  Combina\u00e7\u00e3o exata",
            "title": "Filtros"
        },
        {
            "location": "/desenvolvimento/pythondjango/ldap/",
            "text": "Vamos conectar ao dominio \nwilliamgalleti.com\n\u00b6\n\n\nInstala\u00e7\u00e3o\n\u00b6\n\n\n1\npip\n \ninstall\n \ndjango\n-\npython3\n-\nldap\n\n\n\n\n\n\n\nSettings\n\u00b6\n\n\nEdite o arquivo settings.py e:\n* Adicione em \nINSTALLED_APPS\n \n'django_python3_ldap',\n\n* Adicione as Seguintes vari\u00e1veis\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n# Ldap Autentication\n\n\nLDAP_AUTH_URL\n \n=\n \n'ldap://192.168.0.10'\n\n\nLDAP_AUTH_USE_TLS\n \n=\n \nFalse\n\n\nLDAP_AUTH_SEARCH_BASE\n \n=\n \n'dc=williamgalleti,dc=com'\n\n\nLDAP_AUTH_OBJECT_CLASS\n \n=\n \n'person'\n\n\nLDAP_AUTH_USER_FIELDS\n \n=\n \n{\n\n    \n'username'\n:\n \n'sAMAccountName'\n,\n\n    \n'first_name'\n:\n \n'givenName'\n,\n\n    \n'last_name'\n:\n \n'sn'\n,\n\n    \n'email'\n:\n \n'mail'\n,\n\n\n}\n\n\nLDAP_AUTH_USER_LOOKUP_FIELDS\n \n=\n \n(\n'username'\n,)\n\n\nLDAP_AUTH_CLEAN_USER_DATA\n \n=\n \n'django_python3_ldap.utils.clean_user_data'\n\n\nLDAP_AUTH_SYNC_USER_RELATIONS\n \n=\n \n'django_python3_ldap.utils.sync_user_relations'\n\n\nLDAP_AUTH_FORMAT_SEARCH_FILTERS\n \n=\n \n'django_python3_ldap.utils.format_search_filters'\n\n\nLDAP_AUTH_FORMAT_USERNAME\n \n=\n \n'django_python3_ldap.utils.format_username_active_directory'\n\n\nLDAP_AUTH_ACTIVE_DIRECTORY_DOMAIN\n \n=\n \n'WILLIAMGALLETI'\n\n\nLDAP_AUTH_CONNECTION_USERNAME\n \n=\n \n'usuario'\n\n\n\n\n\n* Ajustar o django para encontrar a autentica\u00e7\u00e3o pelo LDAP. Adicione a tupla:\n\n1\n2\n3\n4\n5\n# Autentica\u00e7\u00f5es\nAUTHENTICATION_BACKENDS = (\n    'django.contrib.auth.backends.ModelBackend',\n    'django_python3_ldap.auth.LDAPBackend',\n)\n\n\n\n\n\nConclus\u00e3o\n\u00b6\n\n\nCaso as informa\u00e7\u00f5es de conex\u00e3o acima estiverem corretas, basta logar com o usu\u00e1rio do LDAP na sua aplica\u00e7\u00e3o\n\n\nOBS:\n Caso tentar logar no admin, vai receber um aviso de falta de permiss\u00e3o. Quando o ldap recebe o usu\u00e1rio, ele vem sem permiss\u00f5es. Para promover o usu\u00e1rio, utilize o comando \npython manage.py ldap_promote NOMEDOUSUARIO\n\n\nOBS2:\n Caso queira receber todos os usu\u00e1rios (N\u00e3o recomendo), execute o comando \npython manage.py ldap_sync_users\n\n\nRefer\u00eancias\n\u00b6\n\n\nhttps://github.com/etianen/django-python3-ldap",
            "title": "Ldap Windows"
        },
        {
            "location": "/desenvolvimento/pythondjango/ldap/#vamos-conectar-ao-dominio-williamgalleticom",
            "text": "",
            "title": "Vamos conectar ao dominio williamgalleti.com"
        },
        {
            "location": "/desenvolvimento/pythondjango/ldap/#instalacao",
            "text": "1 pip   install   django - python3 - ldap",
            "title": "Instala\u00e7\u00e3o"
        },
        {
            "location": "/desenvolvimento/pythondjango/ldap/#settings",
            "text": "Edite o arquivo settings.py e:\n* Adicione em  INSTALLED_APPS   'django_python3_ldap', \n* Adicione as Seguintes vari\u00e1veis  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 # Ldap Autentication  LDAP_AUTH_URL   =   'ldap://192.168.0.10'  LDAP_AUTH_USE_TLS   =   False  LDAP_AUTH_SEARCH_BASE   =   'dc=williamgalleti,dc=com'  LDAP_AUTH_OBJECT_CLASS   =   'person'  LDAP_AUTH_USER_FIELDS   =   { \n     'username' :   'sAMAccountName' , \n     'first_name' :   'givenName' , \n     'last_name' :   'sn' , \n     'email' :   'mail' ,  }  LDAP_AUTH_USER_LOOKUP_FIELDS   =   ( 'username' ,)  LDAP_AUTH_CLEAN_USER_DATA   =   'django_python3_ldap.utils.clean_user_data'  LDAP_AUTH_SYNC_USER_RELATIONS   =   'django_python3_ldap.utils.sync_user_relations'  LDAP_AUTH_FORMAT_SEARCH_FILTERS   =   'django_python3_ldap.utils.format_search_filters'  LDAP_AUTH_FORMAT_USERNAME   =   'django_python3_ldap.utils.format_username_active_directory'  LDAP_AUTH_ACTIVE_DIRECTORY_DOMAIN   =   'WILLIAMGALLETI'  LDAP_AUTH_CONNECTION_USERNAME   =   'usuario'   \n* Ajustar o django para encontrar a autentica\u00e7\u00e3o pelo LDAP. Adicione a tupla: 1\n2\n3\n4\n5 # Autentica\u00e7\u00f5es\nAUTHENTICATION_BACKENDS = (\n    'django.contrib.auth.backends.ModelBackend',\n    'django_python3_ldap.auth.LDAPBackend',\n)",
            "title": "Settings"
        },
        {
            "location": "/desenvolvimento/pythondjango/ldap/#conclusao",
            "text": "Caso as informa\u00e7\u00f5es de conex\u00e3o acima estiverem corretas, basta logar com o usu\u00e1rio do LDAP na sua aplica\u00e7\u00e3o  OBS:  Caso tentar logar no admin, vai receber um aviso de falta de permiss\u00e3o. Quando o ldap recebe o usu\u00e1rio, ele vem sem permiss\u00f5es. Para promover o usu\u00e1rio, utilize o comando  python manage.py ldap_promote NOMEDOUSUARIO  OBS2:  Caso queira receber todos os usu\u00e1rios (N\u00e3o recomendo), execute o comando  python manage.py ldap_sync_users",
            "title": "Conclus\u00e3o"
        },
        {
            "location": "/desenvolvimento/pythondjango/ldap/#referencias",
            "text": "https://github.com/etianen/django-python3-ldap",
            "title": "Refer\u00eancias"
        },
        {
            "location": "/desenvolvimento/javascriptvue/telerik/startproject/",
            "text": "Criar projeto usando VueCli + Telerik KendoUI\n\u00b6\n\n\nGlobais\n\u00b6\n\n\nInstale o \nvue-cli\n e o \nyarn\n\n\n1\nnpm i -g vue-cli yarn\n\n\n\n\n\n\nCriando o projeto\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\nvue init webpack telerikDemo\n\n? Project name telerikdemo\n? Project description Demo de utiliza\u00e7\u00e3o \ndo\n KendoUI com vuejs\n? Author William Galleti <william.galleti@gmail.com>\n? Vue build standalone\n? Install vue-router? Yes\n? Use ESLint to lint your code? Yes\n? Pick an ESLint preset Standard\n? Set up unit tests No\n? Setup e2e tests with Nightwatch? No\n? Should we run \n`\nnpm install\n`\n \nfor\n you after the project has been created? \n(\nrecommended\n)\n no\n\n   vue-cli \u00b7 Generated \n\"telerikDemo\"\n.\n\n\n# Project initialization finished!\n\n\n# ========================\n\n\nTo get started:\n\n  \ncd\n telerikDemo\n  npm install \n(\nor \nif\n using yarn: yarn\n)\n\n  npm run lint -- --fix \n(\nor \nfor\n yarn: yarn run lint --fix\n)\n\n  npm run dev\n\nDocumentation can be found at https://vuejs-templates.github.io/webpack\n\n\n\n\n\n\nRode a instala\u00e7\u00e3o das depend\u00eancias:\n\n\n1\nyarn install\n\n\n\n\n\n\nAntes de continuar, vamos efetuar algumas mudan\u00e7as na estrutura do \nwebpack\n e do \neslint\n para podermos utilizar o jquery e o kendoui.\n\n\nEntre na pasta do projeto \ncd telerikDemo\n\nAcesse o arquivo \nbuild/webpack.dev.conf.js\n e \nbuild/webpack.prod.conf.js\n e adicione no array \nplugins\n o seguinte objeto:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nconst\n \ndevWebpackConfig\n \n=\n \nmerge\n(\nbaseWebpackConfig\n,\n \n{\n\n  \n...\n\n\n  \nplugins\n:\n \n[\n\n\n    \nnew\n \nwebpack\n.\nProvidePlugin\n({\n\n\n      \njQuery\n:\n \n'jquery'\n,\n\n\n      \n$\n:\n \n'jquery'\n,\n\n\n      \njquery\n:\n \n'jquery'\n\n\n    \n})\n\n\n  \n],\n\n\n  \n...\n\n\n\n\n\n\n\nAgora, acesse o arquivo \n.eslintrc.js\n e adicione o jquery no atributo \nenv\n e crie o atributo \nglobals\n adicionando o atributo \nkendo\n \n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nmodule\n.\nexports\n \n=\n \n{\n\n  \n...\n\n  \nenv\n:\n \n{\n\n    \nbrowser\n:\n \ntrue\n,\n\n\n    \njquery\n:\n \ntrue\n\n\n  \n},\n\n\n  \nglobals\n:\n \n{\n\n\n    \nkendo\n:\n \nfalse\n\n\n  \n},\n\n\n  \n...\n\n\n}\n\n\n\n\n\n\n\nFeito isso finalizamos a parte de setup do webpack e eslint, agora vamos para as instala\u00e7\u00f5es e configura\u00e7\u00f5es\n\n\nInstalando as dependencias e configurando\n\u00b6\n\n\n\n\njquery\n\n\nkendo-ui\n\n\nkendo-theme-default\n\n\nkendo-theme-material\n\n\nkendo-datasource-vue-wrapper\n\n\nkendo-grid-vue-wrapper\n\n\n\n\n1\nyarn add jquery @progress/kendo-ui, @progress/kendo-theme-default @progress/kendo-theme-material @progress/kendo-datasource-vue-wrapper @progress/kendo-grid-vue-wrapper \n\n\n\n\n\n\nFeito isso, vamos criar uma pasta \nsrc/plugins\n e dentro dela, criar o arquivo \nkendo.js\n\n\nNele vamos adicionar as importa\u00e7\u00f5es e inicializa\u00e7\u00e3o do kendo no vue\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nimport\n \nVue\n \nfrom\n \n'vue'\n\n\nimport\n \n'@progress/kendo-ui'\n\n\nimport\n \n'@progress/kendo-theme-default/dist/all.css'\n\n\nimport\n \n'@progress/kendo-theme-material/dist/all.css'\n\n\nimport\n \n{\n \nKendoDataSource\n,\n \nKendoDataSourceInstaller\n \n}\n \nfrom\n \n'@progress/kendo-datasource-vue-wrapper'\n\n\nimport\n \n{\n \nKendoGrid\n,\n \nKendoGridInstaller\n \n}\n \nfrom\n \n'@progress/kendo-grid-vue-wrapper'\n\n\n\nVue\n.\nuse\n(\nKendoDataSourceInstaller\n)\n\n\nVue\n.\nuse\n(\nKendoGridInstaller\n)\n\n\n\nVue\n.\ncomponent\n(\nKendoDataSource\n)\n\n\nVue\n.\ncomponent\n(\nKendoGrid\n)\n\n\n\n\n\n\n\nAgora no nosso \nsrc/main.js\n, vamos importar nosso \nkendo.js\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\nimport\n \nVue\n \nfrom\n \n'vue'\n\n\nimport\n \nApp\n \nfrom\n \n'./App'\n\n\nimport\n \nrouter\n \nfrom\n \n'./router'\n\n\nimport\n \n'@/plugins/kendo'\n\n\n\n\nVue\n.\nconfig\n.\nproductionTip\n \n=\n \nfalse\n\n\n\n/* eslint-disable no-new */\n\n\nnew\n \nVue\n({\n\n  \nel\n:\n \n'#app'\n,\n\n  \nrouter\n,\n\n  \ncomponents\n:\n \n{\n \nApp\n \n},\n\n  \ntemplate\n:\n \n'<App/>'\n\n\n})\n\n\n\n\n\n\n\nInternacionaliza\u00e7\u00e3o\n\u00b6\n\n\nPara traduzir para \npt-br\n, edite o arquivo \nsrc/plugins/kendo.js\n e importar o cultures referente ao idioma e definir na v\u00e1riavel \nkendo.culture\n o idioma.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\nimport\n \nVue\n \nfrom\n \n'vue'\n\n\nimport\n \n'@progress/kendo-ui'\n\n\nimport\n \n'@progress/kendo-theme-default/dist/all.css'\n\n\nimport\n \n'@progress/kendo-theme-material/dist/all.css'\n\n\nimport\n \n'@progress/kendo-ui/js/cultures/kendo.culture.pt-BR'\n\n\nimport\n \n{\n \nKendoDataSource\n,\n \nKendoDataSourceInstaller\n \n}\n \nfrom\n \n'@progress/kendo-datasource-vue-wrapper'\n\n\nimport\n \n{\n \nKendoGrid\n,\n \nKendoGridInstaller\n \n}\n \nfrom\n \n'@progress/kendo-grid-vue-wrapper'\n\n\n\nkendo\n.\nculture\n(\n'pt-BR'\n)\n\n\n\n\nVue\n.\nuse\n(\nKendoDataSourceInstaller\n)\n\n\nVue\n.\nuse\n(\nKendoGridInstaller\n)\n\n\n\nVue\n.\ncomponent\n(\nKendoDataSource\n)\n\n\nVue\n.\ncomponent\n(\nKendoGrid\n)",
            "title": "StartProject"
        },
        {
            "location": "/desenvolvimento/javascriptvue/telerik/startproject/#criar-projeto-usando-vuecli-telerik-kendoui",
            "text": "",
            "title": "Criar projeto usando VueCli + Telerik KendoUI"
        },
        {
            "location": "/desenvolvimento/javascriptvue/telerik/startproject/#globais",
            "text": "Instale o  vue-cli  e o  yarn  1 npm i -g vue-cli yarn",
            "title": "Globais"
        },
        {
            "location": "/desenvolvimento/javascriptvue/telerik/startproject/#criando-o-projeto",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26 vue init webpack telerikDemo\n\n? Project name telerikdemo\n? Project description Demo de utiliza\u00e7\u00e3o  do  KendoUI com vuejs\n? Author William Galleti <william.galleti@gmail.com>\n? Vue build standalone\n? Install vue-router? Yes\n? Use ESLint to lint your code? Yes\n? Pick an ESLint preset Standard\n? Set up unit tests No\n? Setup e2e tests with Nightwatch? No\n? Should we run  ` npm install `   for  you after the project has been created?  ( recommended )  no\n\n   vue-cli \u00b7 Generated  \"telerikDemo\" . # Project initialization finished!  # ======================== \n\nTo get started:\n\n   cd  telerikDemo\n  npm install  ( or  if  using yarn: yarn ) \n  npm run lint -- --fix  ( or  for  yarn: yarn run lint --fix ) \n  npm run dev\n\nDocumentation can be found at https://vuejs-templates.github.io/webpack   Rode a instala\u00e7\u00e3o das depend\u00eancias:  1 yarn install   Antes de continuar, vamos efetuar algumas mudan\u00e7as na estrutura do  webpack  e do  eslint  para podermos utilizar o jquery e o kendoui.  Entre na pasta do projeto  cd telerikDemo \nAcesse o arquivo  build/webpack.dev.conf.js  e  build/webpack.prod.conf.js  e adicione no array  plugins  o seguinte objeto:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 const   devWebpackConfig   =   merge ( baseWebpackConfig ,   { \n   ...     plugins :   [       new   webpack . ProvidePlugin ({         jQuery :   'jquery' ,         $ :   'jquery' ,         jquery :   'jquery'       })     ],     ...    Agora, acesse o arquivo  .eslintrc.js  e adicione o jquery no atributo  env  e crie o atributo  globals  adicionando o atributo  kendo     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 module . exports   =   { \n   ... \n   env :   { \n     browser :   true ,       jquery :   true     },     globals :   {       kendo :   false     },     ...  }    Feito isso finalizamos a parte de setup do webpack e eslint, agora vamos para as instala\u00e7\u00f5es e configura\u00e7\u00f5es",
            "title": "Criando o projeto"
        },
        {
            "location": "/desenvolvimento/javascriptvue/telerik/startproject/#instalando-as-dependencias-e-configurando",
            "text": "jquery  kendo-ui  kendo-theme-default  kendo-theme-material  kendo-datasource-vue-wrapper  kendo-grid-vue-wrapper   1 yarn add jquery @progress/kendo-ui, @progress/kendo-theme-default @progress/kendo-theme-material @progress/kendo-datasource-vue-wrapper @progress/kendo-grid-vue-wrapper    Feito isso, vamos criar uma pasta  src/plugins  e dentro dela, criar o arquivo  kendo.js  Nele vamos adicionar as importa\u00e7\u00f5es e inicializa\u00e7\u00e3o do kendo no vue   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 import   Vue   from   'vue'  import   '@progress/kendo-ui'  import   '@progress/kendo-theme-default/dist/all.css'  import   '@progress/kendo-theme-material/dist/all.css'  import   {   KendoDataSource ,   KendoDataSourceInstaller   }   from   '@progress/kendo-datasource-vue-wrapper'  import   {   KendoGrid ,   KendoGridInstaller   }   from   '@progress/kendo-grid-vue-wrapper'  Vue . use ( KendoDataSourceInstaller )  Vue . use ( KendoGridInstaller )  Vue . component ( KendoDataSource )  Vue . component ( KendoGrid )    Agora no nosso  src/main.js , vamos importar nosso  kendo.js   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 import   Vue   from   'vue'  import   App   from   './App'  import   router   from   './router'  import   '@/plugins/kendo'   Vue . config . productionTip   =   false  /* eslint-disable no-new */  new   Vue ({ \n   el :   '#app' , \n   router , \n   components :   {   App   }, \n   template :   '<App/>'  })",
            "title": "Instalando as dependencias e configurando"
        },
        {
            "location": "/desenvolvimento/javascriptvue/telerik/startproject/#internacionalizacao",
            "text": "Para traduzir para  pt-br , edite o arquivo  src/plugins/kendo.js  e importar o cultures referente ao idioma e definir na v\u00e1riavel  kendo.culture  o idioma.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 import   Vue   from   'vue'  import   '@progress/kendo-ui'  import   '@progress/kendo-theme-default/dist/all.css'  import   '@progress/kendo-theme-material/dist/all.css'  import   '@progress/kendo-ui/js/cultures/kendo.culture.pt-BR'  import   {   KendoDataSource ,   KendoDataSourceInstaller   }   from   '@progress/kendo-datasource-vue-wrapper'  import   {   KendoGrid ,   KendoGridInstaller   }   from   '@progress/kendo-grid-vue-wrapper'  kendo . culture ( 'pt-BR' )   Vue . use ( KendoDataSourceInstaller )  Vue . use ( KendoGridInstaller )  Vue . component ( KendoDataSource )  Vue . component ( KendoGrid )",
            "title": "Internacionaliza\u00e7\u00e3o"
        },
        {
            "location": "/desenvolvimento/javascriptvue/telerik/samples/",
            "text": "Exemplos de Uso\n\u00b6\n\n\nCustomizar coluna\n\u00b6\n\n\nExiste casos onde precisamos adicionar templates a uma coluna. No caso do kendo-grid, vamos usar o atributo \ntemplate\n do kendo-column.\n\n\nOBS:\n Estou usando o vuetify\n\n\nExemplo:\n\n\n\n\nC\u00f3digo:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n<\ntemplate\n>\n\n    \n<\nkendo\n-\ngrid\n \n:\ndata\n-\nsource\n=\n\"dataSource\"\n\n                \n:\npageable\n=\n\"false\"\n\n                \n:\nsortable\n=\n\"true\"\n\n                \nref\n=\n\"grid\"\n>\n\n        \n<\nkendo\n-\ngrid\n-\ncolumn\n \nfield\n=\n\"status_display\"\n\n                            \ntitle\n=\n\"Status\"\n\n                            \n:\nwidth\n=\n\"120\"\n\n\n                            \n:\ntemplate\n=\n\"status_display_template\"\n><\n/kendo-grid-column>\n\n\n        \n<\nkendo\n-\ngrid\n-\ncolumn\n \nfield\n=\n\"descricao\"\n\n                            \ntitle\n=\n\"Anota\u00e7\u00e3o\"\n><\n/kendo-grid-column>\n\n    \n<\n/kendo-grid>\n\n\n<\n/template>\n\n\n\n<\nscript\n>\n\n\nexport\n \ndefault\n \n{\n\n  \ncomputed\n:\n \n{\n\n    \ndataSource\n \n()\n \n{\n\n      \nreturn\n \nnew\n \nkendo\n.\ndata\n.\nDataSource\n({\n\n        \ntransport\n:\n \n{\n\n          \nread\n:\n \n{\n\n            \nurl\n:\n \n'minhaapi'\n\n          \n}\n\n        \n}\n\n      \n})\n\n    \n},\n\n\n    \nstatus_display_template\n \n()\n \n{\n\n\n      \nreturn\n \n`<div class=\"chip #= status_display === 'Pendente' ? 'red' : 'green' # white--text\"><span class=\"chip__content\">#= status_display #</span></div>`\n\n\n    \n}\n\n\n  \n}\n\n\n}\n\n\n<\n/script>\n\n\n\n\n\n\n\nIcones em comandos\n\u00b6\n\n\nExemplo:\n\n\n\n\nC\u00f3digo:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n<\ntemplate\n>\n\n    \n<\nkendo\n-\ngrid\n \n:\ndata\n-\nsource\n=\n\"dataSource\"\n\n                \n:\npageable\n=\n\"false\"\n\n                \n:\nsortable\n=\n\"true\"\n\n                \nv\n-\non\n:\ndatabound\n=\n\"gridBound\"\n\n                \nref\n=\n\"grid\"\n>\n\n        \n<\nkendo\n-\ngrid\n-\ncolumn\n \nfield\n=\n\"status_display\"\n\n                            \ntitle\n=\n\"Status\"\n\n                            \n:\nwidth\n=\n\"120\"\n\n                            \n:\ntemplate\n=\n\"status_display_template\"\n><\n/kendo-grid-column>\n\n        \n<\nkendo\n-\ngrid\n-\ncolumn\n \nfield\n=\n\"descricao\"\n\n                            \ntitle\n=\n\"Anota\u00e7\u00e3o\"\n><\n/kendo-grid-column>\n\n\n        \n<\nkendo\n-\ngrid\n-\ncolumn\n \n:\ncommand\n=\n\"resolverCmd\"\n \n:\nwidth\n=\n\"70\"\n><\n/kendo-grid-column>\n\n\n        \n<\nkendo\n-\ngrid\n-\ncolumn\n \n:\ncommand\n=\n\"cancelarCmd\"\n \n:\nwidth\n=\n\"70\"\n><\n/kendo-grid-column>\n\n\n    \n<\n/kendo-grid>\n\n\n<\n/template>\n\n\n\n<\nscript\n>\n\n\nexport\n \ndefault\n \n{\n\n  \ncomputed\n:\n \n{\n\n    \ncancelarCmd\n \n()\n \n{\n\n\n      \nreturn\n \n{\n\n\n        \nname\n:\n \n'cancelar'\n,\n\n\n        \ntext\n:\n \n' '\n,\n\n\n        \nclassName\n:\n \n'k-button-icon'\n,\n\n\n        \nclick\n \n(\ne\n)\n \n{\n\n\n          \ne\n.\npreventDefault\n()\n\n\n          \nconsole\n.\nlog\n(\ne\n)\n\n\n        \n}\n\n\n      \n}\n\n\n    \n},\n\n\n    \nresolverCmd\n \n()\n \n{\n\n\n      \nreturn\n \n{\n\n\n        \nname\n:\n \n'resolver'\n,\n\n\n        \ntext\n:\n \n' '\n,\n\n\n        \nclassName\n:\n \n'k-button-icon'\n,\n\n\n        \nclick\n \n(\ne\n)\n \n{\n\n\n          \ne\n.\npreventDefault\n()\n\n\n          \nconsole\n.\nlog\n(\ne\n)\n\n\n        \n}\n\n      \n}\n\n    \n},\n      \n    \ndataSource\n \n()\n \n{\n\n      \nreturn\n \nnew\n \nkendo\n.\ndata\n.\nDataSource\n({\n\n        \ntransport\n:\n \n{\n\n          \nread\n:\n \n{\n\n            \nurl\n:\n \n'minhaapi'\n\n          \n}\n\n        \n}\n\n      \n})\n\n    \n},\n\n    \nstatus_display_template\n \n()\n \n{\n\n      \nreturn\n \n`<div class=\"chip #= status_display === 'Pendente' ? 'red' : 'green' # white--text\"><span class=\"chip__content\">#= status_display #</span></div>`\n\n    \n}\n\n  \n},\n\n  \nmethods\n:\n \n{\n\n\n    \ngridBound\n \n(\ne\n)\n \n{\n\n\n      \n$\n(\n'.k-grid-resolver'\n).\naddClass\n(\n'k-icon'\n).\naddClass\n(\n' k-i-check'\n)\n\n\n      \n$\n(\n'.k-grid-cancelar'\n).\naddClass\n(\n'k-icon'\n).\naddClass\n(\n' k-i-close-outline'\n)\n\n\n    \n}\n\n\n  \n}\n\n\n}\n\n\n<\n/script>",
            "title": "Samples"
        },
        {
            "location": "/desenvolvimento/javascriptvue/telerik/samples/#exemplos-de-uso",
            "text": "",
            "title": "Exemplos de Uso"
        },
        {
            "location": "/desenvolvimento/javascriptvue/telerik/samples/#customizar-coluna",
            "text": "Existe casos onde precisamos adicionar templates a uma coluna. No caso do kendo-grid, vamos usar o atributo  template  do kendo-column.  OBS:  Estou usando o vuetify  Exemplo:   C\u00f3digo:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32 < template > \n     < kendo - grid   : data - source = \"dataSource\" \n                 : pageable = \"false\" \n                 : sortable = \"true\" \n                 ref = \"grid\" > \n         < kendo - grid - column   field = \"status_display\" \n                             title = \"Status\" \n                             : width = \"120\"                               : template = \"status_display_template\" >< /kendo-grid-column>           < kendo - grid - column   field = \"descricao\" \n                             title = \"Anota\u00e7\u00e3o\" >< /kendo-grid-column> \n     < /kendo-grid>  < /template>  < script >  export   default   { \n   computed :   { \n     dataSource   ()   { \n       return   new   kendo . data . DataSource ({ \n         transport :   { \n           read :   { \n             url :   'minhaapi' \n           } \n         } \n       }) \n     },       status_display_template   ()   {         return   `<div class=\"chip #= status_display === 'Pendente' ? 'red' : 'green' # white--text\"><span class=\"chip__content\">#= status_display #</span></div>`       }     }  }  < /script>",
            "title": "Customizar coluna"
        },
        {
            "location": "/desenvolvimento/javascriptvue/telerik/samples/#icones-em-comandos",
            "text": "Exemplo:   C\u00f3digo:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63 < template > \n     < kendo - grid   : data - source = \"dataSource\" \n                 : pageable = \"false\" \n                 : sortable = \"true\" \n                 v - on : databound = \"gridBound\" \n                 ref = \"grid\" > \n         < kendo - grid - column   field = \"status_display\" \n                             title = \"Status\" \n                             : width = \"120\" \n                             : template = \"status_display_template\" >< /kendo-grid-column> \n         < kendo - grid - column   field = \"descricao\" \n                             title = \"Anota\u00e7\u00e3o\" >< /kendo-grid-column>           < kendo - grid - column   : command = \"resolverCmd\"   : width = \"70\" >< /kendo-grid-column>           < kendo - grid - column   : command = \"cancelarCmd\"   : width = \"70\" >< /kendo-grid-column>       < /kendo-grid>  < /template>  < script >  export   default   { \n   computed :   { \n     cancelarCmd   ()   {         return   {           name :   'cancelar' ,           text :   ' ' ,           className :   'k-button-icon' ,           click   ( e )   {             e . preventDefault ()             console . log ( e )           }         }       },       resolverCmd   ()   {         return   {           name :   'resolver' ,           text :   ' ' ,           className :   'k-button-icon' ,           click   ( e )   {             e . preventDefault ()             console . log ( e )           } \n       } \n     },       \n     dataSource   ()   { \n       return   new   kendo . data . DataSource ({ \n         transport :   { \n           read :   { \n             url :   'minhaapi' \n           } \n         } \n       }) \n     }, \n     status_display_template   ()   { \n       return   `<div class=\"chip #= status_display === 'Pendente' ? 'red' : 'green' # white--text\"><span class=\"chip__content\">#= status_display #</span></div>` \n     } \n   }, \n   methods :   {       gridBound   ( e )   {         $ ( '.k-grid-resolver' ). addClass ( 'k-icon' ). addClass ( ' k-i-check' )         $ ( '.k-grid-cancelar' ). addClass ( 'k-icon' ). addClass ( ' k-i-close-outline' )       }     }  }  < /script>",
            "title": "Icones em comandos"
        }
    ]
}